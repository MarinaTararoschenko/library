{
    "pipes": [],
    "interfaces": [
        {
            "name": "Contact",
            "id": "interface-Contact-d41a18758ded56a15a7d7ed80735e6c5b9a32949a9e521b2dd77743ef6f98e3b9305c90cd276ea7f5452265f07a0a313251ce997f953b4bb16f116c5aa400043",
            "file": "src/app/components/form/data-contacts.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Contact {\n    city: string;\n    country: string;\n    country_code: string;\n    currency_code: string;\n    flag_url: string;\n    phone_code_type: string;\n    phone_code: string;\n    main_phone: string;\n    main_phone_href: string;\n    taxez: string;\n    currency_number: number;\n}\n\nexport const CONTACTS = [\n    {\n        city: 'Santiago',\n        country: 'Chile',\n        country_code: 'cl',\n        currency_code: 'CLP',\n        flag_url: '/assets/images/flags/cl.svg',\n        phone_code_type: 'default',\n        phone_code: '+56',\n        main_phone: '+56 2 3210 9063',\n        main_phone_href: '+56232109063',\n        taxez: ' + IVA',\n        currency_number: 1\n    },\n    {\n        city: 'Santiago',\n        country: 'Chile (IP)',\n        country_code: 'cl',\n        currency_code: 'CLP',\n        flag_url: '/assets/images/flags/cl.svg',\n        phone_code_type: 'ip',\n        phone_code: '+44',\n        main_phone: '+44 210 9063',\n        main_phone_href: '+442109063',\n        taxez: ' + IVA',\n        currency_number: 1\n    },\n    {\n        city: 'Lima',\n        country: 'Perú',\n        country_code: 'pe',\n        currency_code: 'PEN',\n        flag_url: '/assets/images/flags/pe.svg',\n        phone_code_type: 'default',\n        phone_code: '+51',\n        main_phone: '+51 1 1707 0316',\n        main_phone_href: '+51117070316',\n        taxez: ' + IGV',\n        currency_number: 5\n    },\n    {\n        city: 'Ciudad de México',\n        country: 'México',\n        country_code: 'me',\n        currency_code: 'MXN',\n        flag_url: '/assets/images/flags/mx.svg',\n        phone_code_type: 'default',\n        phone_code: '+52',\n        main_phone: '+52 55 4163 8355',\n        main_phone_href: '+525541638355',\n        taxez: '',\n        currency_number: 7\n    },\n    {\n        city: 'Buenos Aires',\n        country: 'Argentina',\n        country_code: 'ar',\n        currency_code: 'ARS',\n        flag_url: '/assets/images/flags/ar.svg',\n        phone_code_type: 'default',\n        phone_code: '+54',\n        main_phone: '+54 11 5168 6187',\n        main_phone_href: '+541151686187',\n        taxez: '',\n        currency_number: 10\n    },\n    {\n        city: 'Bogotá',\n        country: 'Colombia',\n        country_code: 'co',\n        currency_code: 'COP',\n        flag_url: '/assets/images/flags/co.svg',\n        phone_code_type: 'default',\n        phone_code: '+57',\n        main_phone: '+57 1 328 9068',\n        main_phone_href: '+5713289068',\n        taxez: '',\n        currency_number: 6\n    }\n];\n",
            "properties": [
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "country_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "currency_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "currency_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "flag_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "main_phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "main_phone_href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "phone_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "phone_code_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "taxez",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAxisYSettings",
            "id": "interface-IAxisYSettings-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "borderStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "indentAxisX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "indentAxisY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IBarSettings",
            "id": "interface-IBarSettings-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "gap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "indentAxisX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "indentAxisY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "radius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IChartSettings",
            "id": "interface-IChartSettings-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "axisY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAxisYSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "bar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IBarSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "orientationAxisY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICustomSelect",
            "id": "interface-ICustomSelect-6fa62ce85b9f1d4d664af81b62782ea01c8220f45a9f94812b3fe0c7d39817731d8d049a8dcfbb0893054d02a53edbef6a8c9becb26011fee5946cf59c088693",
            "file": "src/app/components/dashboard/custom-select/custom-select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nexport interface ICustomSelect {\n    date: Date; optionValue: string; label?: string;\n}\n\n@Component({\n    selector: 'app-custom-select',\n    templateUrl: './custom-select.component.html',\n    styleUrls: ['./custom-select.component.scss']\n})\nexport class CustomSelectComponent implements OnInit {\n    @Input() public current!: ICustomSelect;\n    @Input() public options!: Array<ICustomSelect>;\n    @Input() public type = 1;\n    @Output() public selected = new EventEmitter<{ option: ICustomSelect, index?: number }>();\n\n    public data!: Array<ICustomSelect>;\n    public lableObj!: ICustomSelect;\n\n    public ngOnInit(): void {\n        this.data = this.options;\n        this.lableObj = this.data.filter(option => !!option.label)[0];\n    }\n\n    public selectedOption(option: ICustomSelect, index?: number): void {\n        this.current = option;\n\n        if (index) {\n            this.selected.emit({ option: option, index: index})\n        } else {\n            this.selected.emit({ option: option })\n        }\n\n    }\n\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDataAxisX",
            "id": "interface-IDataAxisX-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDataAxisY",
            "id": "interface-IDataAxisY-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDataBar",
            "id": "interface-IDataBar-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDataChart",
            "id": "interface-IDataChart-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "domainX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "domainY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "labelX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "prefixY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMatMenuList",
            "id": "interface-IMatMenuList-237faf2fcb8a8047139fa91c46098d16c2e6783879102c2ced4d5adb084fb52ef8e32cf88bc05cbf5de3a2c35a74fa18f24f774035d21644ff0cee532ad7c265",
            "file": "src/app/common/web-header/header/header.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';\n\nimport { DropdownService } from '../../services/dropdown.service';\n\ninterface IMatMenuList {\n    icon: string;\n    text: string;\n}\n\n@Component({\n    selector: 'app-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n    @ViewChild('header', { static: true }) header!: ElementRef;\n\n    isOpenMatMenu = false;\n    isOpenDropdown = false;\n\n    matMenuList: Array<IMatMenuList> = [\n        {\n            icon: 'settings',\n            text: 'Agendar Capacitación'\n        },\n        {\n            icon: 'star',\n            text: 'Contactar soporte'\n        },\n        {\n            icon: 'apps',\n            text: 'Contactar con ventas'\n        }\n    ];\n\n    constructor(\n        private renderer: Renderer2,\n        private _dropdownSrv: DropdownService\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    openDropdownMenu(ev: any): void {\n        this.isOpenDropdown = true;\n\n        setTimeout(() => {\n            this._dropdownSrv.setDropdownPosition(ev.target.getBoundingClientRect().left);\n            this.renderer.addClass(document.body, 'open-dropdown');\n        }, 100);\n    }\n\n    closeDropdownMenu(): void {\n        this.renderer.removeClass(document.body, 'open-dropdown');\n        this.isOpenDropdown = false;\n    }\n\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISlider",
            "id": "interface-ISlider-fcd1899e71949600a7e48237f662fe4b60bb314300279161b812335964f951837a372b28f2eecb26c243fe8d852bcad65303deac423ed475c9c849c9817ee908",
            "file": "src/app/common/slider/slider.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, HostListener, Inject, OnDestroy, PLATFORM_ID, ViewChild } from '@angular/core';\n\ninterface ISlider {\n    title: string;\n    suptitle: string;\n}\n\ninterface ISliderProps {\n    parent: any;\n    slideMove: number;\n    slideActive: number;\n    itemWidth: number;\n    gap: number;\n    swipe: boolean;\n    data: Array<ISlider>;\n}\n\n@Component({\n  selector: 'app-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n})\nexport class SliderComponent implements AfterViewInit, OnDestroy {\n    @ViewChild('carousel') public slider!: ElementRef;\n\n    public sliderData: Array<ISlider> = [\n        {\n            title: 'Slide 1',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 2',\n            suptitle: 'Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 3',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 4',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 5',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 6',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 7',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 8',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        }\n    ];\n\n    public sliderProps!: ISliderProps;\n\n    private container: any;\n    private drag: { pressed: boolean; startPosition: number; newPosition: number } = {\n        pressed: false, startPosition: 0, newPosition: 0\n    };\n    private start!: (v: any) => void;\n    private move!: (v: any) => void;\n    private stop!: () => void;\n    public isNextDisabled = false;\n    public isPrevDisabled = true;\n    private itemsVisible!: number;\n\n    @HostListener('window:resize')\n    onResize() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.initSlider();\n        }\n    }\n\n    constructor(\n        @Inject(PLATFORM_ID) private platformId: any\n    ) { }\n\n    ngAfterViewInit(): void {\n        if (isPlatformBrowser(this.platformId)) {\n            this.initSlider();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._checkTouchDevice()) {\n            this.container?.removeEventListener('touchstart', this.start, false);\n            this.container?.removeEventListener('touchmove', this.move, false);\n        } else {\n\n            this.container?.removeEventListener('mousedown', this.start, false);\n            this.container?.removeEventListener('mousemove', this.move, false);\n            this.container?.removeEventListener('mouseleave', this.stop, false);\n            this.container?.removeEventListener('mouseup', this.stop, false);\n        }\n    }\n\n    public initSlider(): void {\n        this.sliderProps = {\n            parent: this.slider.nativeElement,\n            slideMove: 1,\n            slideActive: 0,\n            itemWidth: 320,\n            gap: 15,\n            swipe: true,\n            data: this.sliderData\n        };\n\n        this.container = this.sliderProps.parent.children[0];\n        this.container.style.columnGap = this.sliderProps.gap + 'px';\n        this.container.style.width =\n            (this.sliderProps.itemWidth * this.sliderData.length) +\n            (this.sliderProps.gap * (this.sliderData.length - 1)) + 'px';\n        this.container.children[this.sliderProps.slideActive].classList.add('active');\n        this.itemsVisible = Math.floor(this.sliderProps.parent.getBoundingClientRect().width / (this.sliderProps.itemWidth + this.sliderProps.gap));\n\n        if (this.sliderProps.swipe) {\n            this.dragging();\n        }\n    }\n\n    public dragging(): void {\n        this.drag = { pressed: false, startPosition: 0, newPosition: 0 }\n\n        this.start = (e) => {\n            this.drag.pressed = true;\n            this.drag.startPosition = (e.pageX || e.touches[0].clientX) - (this.container.getBoundingClientRect().left);\n            this.container.style.cursor = 'grabbing';\n        }\n\n        this.move = (e) => {\n            if (!this.drag.pressed) return;\n            e.preventDefault();\n\n            const currentX = (e.pageX || e.touches[0].clientX) < 0 ? 0 : (e.pageX || e.touches[0].clientX);\n            const dist = currentX - (this.sliderProps.parent.getBoundingClientRect().left);\n\n            this.drag.newPosition = dist - this.drag.startPosition;\n            this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n            this.container.style.transitionDuration = '0s';\n        }\n\n        this.stop = () => {\n            const parentRect = this.sliderProps.parent.getBoundingClientRect();\n            const containerRect = this.container.getBoundingClientRect();\n            const children = this.container.children;\n            children[this.sliderProps.slideActive].classList.remove('active');\n\n            if (containerRect.left > parentRect.left) {\n                this.sliderProps.slideActive = 0;\n            } else {\n                let currentSlide = Math.round(Math.abs(this.drag.newPosition) / this.sliderProps.itemWidth);\n\n                if (currentSlide + this.itemsVisible - 1 <= this.container.children.length - 1) {\n                    this.sliderProps.slideActive = currentSlide;\n                }\n            }\n\n            children[this.sliderProps.slideActive].classList.add('active');\n\n            this.drag.newPosition = -(this.sliderProps.slideActive * (this.sliderProps.itemWidth + this.sliderProps.gap));\n            this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n            this.container.style.cursor = 'grab';\n            this.container.style.transitionDuration = '.4s';\n            this.drag.pressed = false;\n            this.isPrevDisabled = this.sliderProps.slideActive === 0;\n            this.isNextDisabled = containerRect.width - Math.abs(this.drag.newPosition) + this.sliderProps.gap < parentRect.width;\n        }\n\n        if (this._checkTouchDevice()) {\n            // touch event\n            this.container.addEventListener('touchstart', this.start, false);\n            this.container.addEventListener('touchmove', this.move, false);\n            this.container.addEventListener('touchend', this.stop, false);\n        } else {\n            // mouse event\n            this.container.addEventListener('mousedown', this.start, false);\n            this.container.addEventListener('mousemove', this.move, false);\n            this.container.addEventListener('mouseleave', this.stop, false);\n            this.container.addEventListener('mouseup', this.stop, false);\n        }\n    }\n\n    public moveSlider(direction: string): void {\n        const parentRect = this.sliderProps.parent.getBoundingClientRect();\n        const containerRect = this.container.getBoundingClientRect();\n        const children = this.container.children;\n        children[this.sliderProps.slideActive].classList.remove('active');\n\n        if (direction === 'prev') {\n            if (this.drag.newPosition < 0) {\n                if (Math.round(this.drag.newPosition / (this.sliderProps.itemWidth + this.sliderProps.gap)) > -2) {\n                    this.sliderProps.slideActive = 0;\n                    this.drag.newPosition = 0;\n                } else {\n                    this.sliderProps.slideActive--;\n                    this.drag.newPosition = this.sliderProps.itemWidth + this.sliderProps.gap + this.drag.newPosition;\n                }\n            }\n            this.isNextDisabled = false;\n        } else if (direction === 'next') {\n            if (containerRect.right + this.sliderProps.gap > parentRect.right) {\n                this.sliderProps.slideActive++;\n                this.drag.newPosition = -(this.sliderProps.itemWidth + this.sliderProps.gap) + this.drag.newPosition;\n            }\n            this.isNextDisabled = (containerRect.right - this.sliderProps.itemWidth) < parentRect.right;\n        }\n\n        children[this.sliderProps.slideActive].classList.add('active');\n        this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n        this.isPrevDisabled = this.sliderProps.slideActive === 0;\n    }\n\n    private _checkTouchDevice(): boolean {\n        return 'ontouchstart' in document.documentElement;\n    }\n}\n",
            "properties": [
                {
                    "name": "suptitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISliderProps",
            "id": "interface-ISliderProps-fcd1899e71949600a7e48237f662fe4b60bb314300279161b812335964f951837a372b28f2eecb26c243fe8d852bcad65303deac423ed475c9c849c9817ee908",
            "file": "src/app/common/slider/slider.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, HostListener, Inject, OnDestroy, PLATFORM_ID, ViewChild } from '@angular/core';\n\ninterface ISlider {\n    title: string;\n    suptitle: string;\n}\n\ninterface ISliderProps {\n    parent: any;\n    slideMove: number;\n    slideActive: number;\n    itemWidth: number;\n    gap: number;\n    swipe: boolean;\n    data: Array<ISlider>;\n}\n\n@Component({\n  selector: 'app-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n})\nexport class SliderComponent implements AfterViewInit, OnDestroy {\n    @ViewChild('carousel') public slider!: ElementRef;\n\n    public sliderData: Array<ISlider> = [\n        {\n            title: 'Slide 1',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 2',\n            suptitle: 'Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 3',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 4',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 5',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 6',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 7',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 8',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        }\n    ];\n\n    public sliderProps!: ISliderProps;\n\n    private container: any;\n    private drag: { pressed: boolean; startPosition: number; newPosition: number } = {\n        pressed: false, startPosition: 0, newPosition: 0\n    };\n    private start!: (v: any) => void;\n    private move!: (v: any) => void;\n    private stop!: () => void;\n    public isNextDisabled = false;\n    public isPrevDisabled = true;\n    private itemsVisible!: number;\n\n    @HostListener('window:resize')\n    onResize() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.initSlider();\n        }\n    }\n\n    constructor(\n        @Inject(PLATFORM_ID) private platformId: any\n    ) { }\n\n    ngAfterViewInit(): void {\n        if (isPlatformBrowser(this.platformId)) {\n            this.initSlider();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._checkTouchDevice()) {\n            this.container?.removeEventListener('touchstart', this.start, false);\n            this.container?.removeEventListener('touchmove', this.move, false);\n        } else {\n\n            this.container?.removeEventListener('mousedown', this.start, false);\n            this.container?.removeEventListener('mousemove', this.move, false);\n            this.container?.removeEventListener('mouseleave', this.stop, false);\n            this.container?.removeEventListener('mouseup', this.stop, false);\n        }\n    }\n\n    public initSlider(): void {\n        this.sliderProps = {\n            parent: this.slider.nativeElement,\n            slideMove: 1,\n            slideActive: 0,\n            itemWidth: 320,\n            gap: 15,\n            swipe: true,\n            data: this.sliderData\n        };\n\n        this.container = this.sliderProps.parent.children[0];\n        this.container.style.columnGap = this.sliderProps.gap + 'px';\n        this.container.style.width =\n            (this.sliderProps.itemWidth * this.sliderData.length) +\n            (this.sliderProps.gap * (this.sliderData.length - 1)) + 'px';\n        this.container.children[this.sliderProps.slideActive].classList.add('active');\n        this.itemsVisible = Math.floor(this.sliderProps.parent.getBoundingClientRect().width / (this.sliderProps.itemWidth + this.sliderProps.gap));\n\n        if (this.sliderProps.swipe) {\n            this.dragging();\n        }\n    }\n\n    public dragging(): void {\n        this.drag = { pressed: false, startPosition: 0, newPosition: 0 }\n\n        this.start = (e) => {\n            this.drag.pressed = true;\n            this.drag.startPosition = (e.pageX || e.touches[0].clientX) - (this.container.getBoundingClientRect().left);\n            this.container.style.cursor = 'grabbing';\n        }\n\n        this.move = (e) => {\n            if (!this.drag.pressed) return;\n            e.preventDefault();\n\n            const currentX = (e.pageX || e.touches[0].clientX) < 0 ? 0 : (e.pageX || e.touches[0].clientX);\n            const dist = currentX - (this.sliderProps.parent.getBoundingClientRect().left);\n\n            this.drag.newPosition = dist - this.drag.startPosition;\n            this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n            this.container.style.transitionDuration = '0s';\n        }\n\n        this.stop = () => {\n            const parentRect = this.sliderProps.parent.getBoundingClientRect();\n            const containerRect = this.container.getBoundingClientRect();\n            const children = this.container.children;\n            children[this.sliderProps.slideActive].classList.remove('active');\n\n            if (containerRect.left > parentRect.left) {\n                this.sliderProps.slideActive = 0;\n            } else {\n                let currentSlide = Math.round(Math.abs(this.drag.newPosition) / this.sliderProps.itemWidth);\n\n                if (currentSlide + this.itemsVisible - 1 <= this.container.children.length - 1) {\n                    this.sliderProps.slideActive = currentSlide;\n                }\n            }\n\n            children[this.sliderProps.slideActive].classList.add('active');\n\n            this.drag.newPosition = -(this.sliderProps.slideActive * (this.sliderProps.itemWidth + this.sliderProps.gap));\n            this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n            this.container.style.cursor = 'grab';\n            this.container.style.transitionDuration = '.4s';\n            this.drag.pressed = false;\n            this.isPrevDisabled = this.sliderProps.slideActive === 0;\n            this.isNextDisabled = containerRect.width - Math.abs(this.drag.newPosition) + this.sliderProps.gap < parentRect.width;\n        }\n\n        if (this._checkTouchDevice()) {\n            // touch event\n            this.container.addEventListener('touchstart', this.start, false);\n            this.container.addEventListener('touchmove', this.move, false);\n            this.container.addEventListener('touchend', this.stop, false);\n        } else {\n            // mouse event\n            this.container.addEventListener('mousedown', this.start, false);\n            this.container.addEventListener('mousemove', this.move, false);\n            this.container.addEventListener('mouseleave', this.stop, false);\n            this.container.addEventListener('mouseup', this.stop, false);\n        }\n    }\n\n    public moveSlider(direction: string): void {\n        const parentRect = this.sliderProps.parent.getBoundingClientRect();\n        const containerRect = this.container.getBoundingClientRect();\n        const children = this.container.children;\n        children[this.sliderProps.slideActive].classList.remove('active');\n\n        if (direction === 'prev') {\n            if (this.drag.newPosition < 0) {\n                if (Math.round(this.drag.newPosition / (this.sliderProps.itemWidth + this.sliderProps.gap)) > -2) {\n                    this.sliderProps.slideActive = 0;\n                    this.drag.newPosition = 0;\n                } else {\n                    this.sliderProps.slideActive--;\n                    this.drag.newPosition = this.sliderProps.itemWidth + this.sliderProps.gap + this.drag.newPosition;\n                }\n            }\n            this.isNextDisabled = false;\n        } else if (direction === 'next') {\n            if (containerRect.right + this.sliderProps.gap > parentRect.right) {\n                this.sliderProps.slideActive++;\n                this.drag.newPosition = -(this.sliderProps.itemWidth + this.sliderProps.gap) + this.drag.newPosition;\n            }\n            this.isNextDisabled = (containerRect.right - this.sliderProps.itemWidth) < parentRect.right;\n        }\n\n        children[this.sliderProps.slideActive].classList.add('active');\n        this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n        this.isPrevDisabled = this.sliderProps.slideActive === 0;\n    }\n\n    private _checkTouchDevice(): boolean {\n        return 'ontouchstart' in document.documentElement;\n    }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ISlider>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "gap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "itemWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "slideActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "slideMove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "swipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DropdownService",
            "id": "injectable-DropdownService-d7f79af8f74f761f4d8a018ea772f764dd545c969ff7e99fece6dc870b7712e408dbddc46aff75093452ee1219831513a4145df3b77d976b28e42a9030f4dc27",
            "file": "src/app/common/services/dropdown.service.ts",
            "properties": [
                {
                    "name": "position$",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "getDropdownPosition$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDropdownPosition",
                    "args": [
                        {
                            "name": "position",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\n\n@Injectable()\nexport class DropdownService {\n    position$ = new Subject<number>();\n\n    getDropdownPosition$(): Observable<number> {\n        return this.position$.asObservable();\n    }\n\n    setDropdownPosition(position: number): void {\n        this.position$.next(position);\n    }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-d54cf947aa8c8b110797c1658350761d32a070e0f8a9766b92827316249a6974c4de916cfb6b14a76140d23a5fe2602d07f1cff46382dae008c2c2ec6fe8a0f5",
            "file": "src/app/common/services/theme.services.ts",
            "properties": [
                {
                    "name": "currentMode$",
                    "defaultValue": "new BehaviorSubject<string>('light')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "getThemeMode$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setThemeMode",
                    "args": [
                        {
                            "name": "currentMode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentMode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\n@Injectable()\nexport class ThemeService {\n    currentMode$ = new BehaviorSubject<string>('light');\n\n    getThemeMode$(): Observable<string> {\n        return this.currentMode$.asObservable();\n    }\n\n    setThemeMode(currentMode?: string): void {\n        if (currentMode) {\n            if (localStorage.getItem('theme') === null) {\n                localStorage.setItem('theme', currentMode);\n            } else {\n                localStorage.removeItem('theme');\n            }\n        }\n\n        this.currentMode$.next(localStorage.getItem('theme')!);\n    }\n\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TranslocoHttpLoader",
            "id": "injectable-TranslocoHttpLoader-700874af7e0d12e91b6abe90ef4c4c6a717b1cc3c57b4e8d97d26c79e06959ee061419c8722aa856484bb0d654e171003f06d7fad88e39dd5684115f3c19487f",
            "file": "src/app/transloco-loader.ts",
            "properties": [
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\nimport { inject, Injectable } from \"@angular/core\";\nimport { Translation, TranslocoLoader } from \"@jsverse/transloco\";\n\n@Injectable({ providedIn: \"root\" })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n    private http = inject(HttpClient);\n\n    getTranslation(lang: string) {\n        return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n    }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "SvgTooltipDirective",
            "id": "directive-SvgTooltipDirective-0d142996a229462d4a938d998de5d8356987cc7b0dbab3534f12a23f87912b6d2111590533041e43b12369064f81210643394a41283618809b4b74d82eb08165",
            "file": "src/app/components/dashboard/bar-chart/svg-tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    ElementRef,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewContainerRef\n} from \"@angular/core\";\n\nimport { SvgTooltipComponent } from \"./svg-tooltip/svg-tooltip.component\";\n\n@Directive({\n    selector: '[svgTooltip]'\n})\nexport class SvgTooltipDirective {\n    @Input() public svgTooltipText!: string;\n\n    public componentRef!: ComponentRef<any>;\n    public tooltip: any;\n    public parentRect: any;\n\n    @HostListener('mouseenter') public onMouseEnter(): void {\n        this.showTooltip();\n    }\n\n    @HostListener('mouseleave') public onMouseLeave(): void {\n        this.hideTooltip();\n    }\n\n    constructor(\n        private _el: ElementRef,\n        private _renderer: Renderer2,\n        private _viewContainerRef: ViewContainerRef,\n        private _resolver: ComponentFactoryResolver\n    ) {\n\n    }\n\n    private showTooltip(): void {\n        this._viewContainerRef.clear();\n        const factory = this._resolver.resolveComponentFactory(SvgTooltipComponent);\n        this.componentRef = this._viewContainerRef.createComponent(factory);\n        this.componentRef.instance.text = this.svgTooltipText;\n        this._renderer.appendChild(document.body, this.componentRef.location.nativeElement);\n        this.parentRect = this._el.nativeElement.getBoundingClientRect();\n\n        setTimeout(() => {\n            this.componentRef.instance.style = {\n                'top': `${this.parentRect.top}px`,\n                'left': `${this.parentRect.left}px`,\n                'transform': 'scale(1) translate(-50%, -100%)',\n                'margin-bottom': '10px'\n            }\n        }, 0);\n    }\n\n    private hideTooltip(): void {\n        this.componentRef.instance.style = {\n            'top': `${this.parentRect.top}px`,\n            'left': `${this.parentRect.left}px`,\n            'transform': 'scale(0) translate(-50%, -100%)'\n        }\n\n        setTimeout(() => {\n            this._viewContainerRef.clear();\n        }, 100);\n    }\n\n}\n",
            "selector": "[svgTooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "svgTooltipText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "parentRect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hideTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "showTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-c446c61bac8d4b42643ad48a9e293052accf5a0bf17fddc4d404b227dd09fb1dcbf6cdfe3d6158679b09b6b9131db417c2928ad2cdcf7267c343ccecc15432ec",
            "file": "src/app/common/directives/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AnimationBuilder, AnimationPlayer, animate, keyframes, style } from \"@angular/animations\";\nimport { Directive, ElementRef, EmbeddedViewRef, HostListener, Input, OnInit, TemplateRef, ViewContainerRef } from \"@angular/core\";\n\n@Directive({\n    selector: '[appTooltip]'\n})\nexport class TooltipDirective implements OnInit {\n    @Input() public templateRef!: TemplateRef<Object>;\n    @Input() public position!: { y: string; x: string};\n\n    public view!: EmbeddedViewRef<Object>;\n    public buttonPlayer: AnimationPlayer | undefined;\n    public transformAnimations: any;\n\n    @HostListener(\"mouseenter\") onMouseEnter(): void {\n        this.view = this._viewContainerRef.createEmbeddedView(this.templateRef);\n\n        setTimeout(() => {\n            this._animateColors('show')\n            this.view.rootNodes[0].classList.add('show');\n        }, 100);\n    }\n\n    @HostListener(\"mouseleave\") onMouseLeave(): void {\n        if (this._viewContainerRef) {\n            this.view.rootNodes[0].classList.remove('show');\n            this._animateColors('hide');\n\n            setTimeout(() => {\n                this._viewContainerRef.clear();\n            }, 150);\n        }\n    }\n\n    constructor(\n        private _el: ElementRef,\n        private _viewContainerRef: ViewContainerRef,\n        private _builder: AnimationBuilder\n    ) {}\n\n    ngOnInit(): void {\n        this._el.nativeElement.style.cursor = 'pointer';\n    }\n\n    private _animateColors(state: string): void {\n        if (this.buttonPlayer) {\n            this.buttonPlayer.destroy();\n        }\n        const parentBounding = this._el.nativeElement.getBoundingClientRect();\n        const tooltip = this.view.rootNodes[0];\n\n        if (state === 'show') {\n            let positionY = '0px';\n            let positionLeft = 'auto';\n            let positionRight = 'auto';\n\n            if (this.position.y === 'top') {\n                positionY = parentBounding.top > tooltip.offsetHeight + 8 ? parentBounding.top - tooltip.offsetHeight - 8 + 'px' : parentBounding.bottom + 8 + 'px';\n            } else {\n                positionY = parentBounding.bottom + tooltip.offsetHeight + 8 < window.innerHeight ? parentBounding.bottom + 8 : parentBounding.top - tooltip.offsetHeight - 8;\n            }\n\n            if (this.position.x === 'start') {\n                positionLeft = parentBounding.left + 'px';\n            } else {\n                positionRight = window.innerWidth - parentBounding.right + 'px';\n            }\n            this.transformAnimations = animate('.2s ease-in-out', keyframes([\n                style({\n                    top: positionY,\n                    left: positionLeft,\n                    right: positionRight,\n                    transform: 'scale(0)'\n                }),\n                style({\n                    transform: 'scale(1)'\n                })\n            ]));\n        } else if (state === 'hide') {\n            this.transformAnimations = animate('0.1s ease-out', keyframes([\n                style({\n                    transform: 'scale(0)',\n                    opacity: '0'\n                })\n            ]));\n        }\n\n        const buttonPlayer = this._builder.build(this.transformAnimations).create(this.view.rootNodes[0]);\n        buttonPlayer.play();\n    }\n}\n",
            "selector": "[appTooltip]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "TemplateRef<Object>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonPlayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AnimationPlayer | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "transformAnimations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmbeddedViewRef<Object>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_animateColors",
                    "args": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_builder",
                        "type": "AnimationBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_builder",
                        "type": "AnimationBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4300acc7899712cb25f367dd3c357b8568b3a11fa17c6637f107d7aca1ab15881004e888e09f658c7b06ff973d7e3a85ad26f9bc3894a33710fb5e4cdb484fad",
            "file": "src/app/app.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpenedSidenav",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getScrollEvent",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStateSidebar",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Renderer2, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    isOpenedSidenav = false;\n\n    constructor(\n        @Inject(DOCUMENT) private doc:Document,\n        private renderer: Renderer2\n    ) {\n    }\n\n    getScrollEvent(ev: any): void {\n        const body = this.doc.body;\n        const startScroll = window.innerWidth > 670 ? 64 : 48;\n\n        if (ev.srcElement.scrollTop >= startScroll) {\n            this.renderer.addClass(body, 'fixed-header');\n        } else {\n            this.renderer.removeClass(body, 'fixed-header');\n        }\n    }\n\n    getStateSidebar(state: any): void {\n        this.isOpenedSidenav = state;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".matSidenavContainer {\n  height: 100%;\n}\n\n.matSidenav,\n.mat-drawer-inner-container {\n  overflow: initial !important;\n}\n\nmat-sidenav.matSidenav {\n  display: block !important;\n  visibility: visible !important;\n  transform: translate3d(0, 0, 0) !important;\n  transition: width .4s;\n  width: 64px;\n\n  &.mat-drawer-opened {\n    width: 280px !important;\n  }\n\n  .mdc-label {\n    white-space: nowrap;\n  }\n}\n\n\n.matSidenavContent {\n  margin-left: 64px !important;\n  transition: margin-left .4s;\n}\n\n.mat-drawer-opened~.matSidenavContent {\n  margin-left: 280px !important;\n}\n\n[dir=\"rtl\"] {\n  .matSidenavContent {\n    margin-right: 64px !important;\n    margin-left: 0 !important;\n    transition: margin-right .4s;\n  }\n\n  .mat-drawer-opened~.matSidenavContent {\n    margin-right: 280px !important;\n    margin-left: 0 !important;\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "doc",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-sidenav-container class=\"matSidenavContainer bg-secondary\">\n  <mat-sidenav\n    #sidenav\n    mode=\"side\"\n    class=\"matSidenav bg-primary\"\n    [(opened)]=\"isOpenedSidenav\">\n    <app-sidenav [isOpen]=\"isOpenedSidenav\" (sidebarState)=\"getStateSidebar($event)\"></app-sidenav>\n  </mat-sidenav>\n\n  <mat-sidenav-content class=\"matSidenavContent\" (scroll)=\"getScrollEvent($event)\">\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "BarChartComponent",
            "id": "component-BarChartComponent-89e5c0218d97314791553c70b525c602f26ff497b4351bc3b5527876e3021bdcaf126e0b371f280d3a04e9eb88cb2887acbad939cac2590092164f9962fd5eeb",
            "file": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bar-chart",
            "styleUrls": [],
            "styles": [],
            "template": "<svg #svg height=\"406\" width=\"100%\">\n    <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n    <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n    <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n</svg>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chartSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "IChartSettings",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "Array<IDataChart>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "computedValuesAxisX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IDataAxisX>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "computedValuesAxisY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IDataAxisY>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "computedValuesBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IDataBar>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_createDivisions",
                    "args": [
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<number>",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_createScale",
                    "args": [
                        {
                            "name": "domain",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "range",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(value: number) => number",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "domain",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "range",
                            "type": "[number, number]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getBounds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<IDataChart>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<IDataChart>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getRect",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_roundedValueY",
                    "args": [
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "maxValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\nexport interface IChartSettings {\n    orientationAxisY: string; // set \"toTop\" or \"toBottom\" orientation for Y axis\n    bar: IBarSettings;\n    axisY: IAxisYSettings;\n}\n\nexport interface IAxisYSettings {\n    borderStyle: { // border styles\n        type: string; // set \"dashed\" or other\n        strokeWidth: number; // sets the distance between dashes\n    };\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // intent from top/bottom\n}\n\nexport interface IBarSettings {\n    gap: number; // spacing between bar\n    radius: number; // radius for bar\n    indentAxisX: number; // intent from left\n    indentAxisY: number; // indent from top/bottom\n}\n\nexport interface IDataAxisY {\n    path: string;\n    label: { value: string; dy: number };\n}\n\nexport interface IDataAxisX {\n    y: number;\n    x: number;\n    label: string;\n}\n\nexport interface IDataBar {\n    x: number; y: number; width: number; height: number; tooltip: string;\n}\n\nexport interface IDataChart {\n    domainX: number;\n    domainY: number;\n    labelX: string;\n    prefixY?: string;\n    tooltip: string;\n}\n\n@Component({\n    selector: 'app-bar-chart',\n    template: `\n    <svg #svg height=\"406\" width=\"100%\">\n        <g svg-grid-axis-y [settings]=\"chartSettings.axisY\" [data]=\"computedValuesAxisY\"></g>\n        <g svg-grid-axis-x [data]=\"computedValuesAxisX\"></g>\n        <g svg-bar [settings]=\"chartSettings.bar\" [data]=\"computedValuesBar\"></g>\n    </svg>\n    `\n})\nexport class BarChartComponent implements OnInit, OnChanges {\n    @Input() public chartSettings!: IChartSettings;\n    @Input() public data!: Array<IDataChart>;\n\n    public bounds!: { minX: number; maxX: number; minY: number; maxY: number };\n    public computedValuesBar!: Array<IDataBar>;\n    public computedValuesAxisY!: Array<IDataAxisY>;\n    public computedValuesAxisX!: Array<IDataAxisX>;\n\n    constructor(private el: ElementRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!!changes['data'].previousValue) {\n            this.data = changes['data'].currentValue;\n            this.initData();\n        }\n    }\n\n    ngOnInit(): void {\n        this.initData();\n    }\n\n    public initData(): void {\n        this.bounds = this._getBounds(this.data);\n\n        const indentAxisX = !!this.chartSettings.bar.indentAxisX ? this.chartSettings.bar.indentAxisX : 0;\n        const indentAxisY = !!this.chartSettings.bar.indentAxisY ? this.chartSettings.bar.indentAxisY : 0;\n        const barWidth = (this._getRect().width - indentAxisX - (this.data.length * this.chartSettings.bar.gap)) / this.data.length;\n        const offsetAxisYLabel = 6;\n\n        const scaleY = this._createScale(\n            [0, this._roundedValueY(this.bounds.maxY)],\n            [0, this._getRect().height - indentAxisY - offsetAxisYLabel]\n        );\n\n        // set computed data for the axis Y\n        const startPath =   !!this.chartSettings.axisY.indentAxisX ?\n                            this.chartSettings.axisY.indentAxisX : 0; // start of the path\n        const widthPath = this._getRect().width - startPath; // path width\n        const prefixY = !!this.data[0].prefixY ? this.data[0].prefixY : '';\n\n        this.computedValuesAxisY = this._createDivisions(this.bounds.maxY).map(division => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ?\n                            scaleY(division) + indentAxisY :\n                            this._getRect().height - scaleY(division) - indentAxisY;\n            return {\n                path: `M${startPath},${calcY}H${widthPath}`,\n                label: {\n                    value: `${prefixY}${division}`,\n                    dy: calcY\n                }\n            }\n        });\n\n        const endIndentAxisX = 10; // padding at the end so that the long X-axis text label is not cut off\n\n        // set computed data for the axis X\n        this.computedValuesAxisX = this.data.map((obj: any, i: number) => {\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n            return {\n                x: calcX + barWidth / 2,\n                y: this._getRect().height - 10,\n                label: `${obj.labelX}`\n            }\n        });\n\n        // set computed data for the bar\n        this.computedValuesBar = this.data.map((obj: any, i: number) => {\n            const calcY =   this.chartSettings.orientationAxisY === 'toBottom' ? indentAxisY :\n                            this._getRect().height - scaleY(obj.domainY) - indentAxisY;\n            const calcX = i === 0 ? indentAxisX - endIndentAxisX :\n                                    ((barWidth + this.chartSettings.bar.gap) * i) + indentAxisX - endIndentAxisX;\n\n            return {\n                x: calcX,\n                y: calcY,\n                width: barWidth,\n                height: scaleY(obj.domainY),\n                tooltip: `${obj.tooltip}`\n            }\n        });\n    }\n\n    private _roundedValueY(maxValue: number): number {\n        if (maxValue > 1e7) {\n            return (Math.ceil(maxValue / 1e7) * 1e7);\n        }\n        else if (maxValue > 1e6) {\n            return (Math.ceil(maxValue / 1e6) * 1e6)\n        }\n        else if (maxValue > 1e5) {\n            return (Math.ceil(maxValue / 1e5) * 1e5)\n        }\n        else if (maxValue > 1e4) {\n            return (Math.ceil(maxValue / 1e4) * 1e4)\n        }\n        else if (maxValue > 1e3) {\n            return (Math.ceil(maxValue / 1e3) * 1e3)\n        }\n        else if (maxValue > 100) {\n            return (Math.ceil(maxValue / 100) * 100)\n        }\n        else if (maxValue > 10) {\n            return (Math.ceil(maxValue / 10) * 10)\n        }\n        else {\n            return maxValue\n        }\n    }\n\n    private _createScale(domain: [number, number], range: [number, number]) {\n        const [minDomain, maxDomain] = domain;\n        const [minRange, maxRange] = range;\n        const sizeOfDomain = maxDomain - minDomain;\n        const sizeOfRange = maxRange - minRange;\n\n        return function scale(value: number) {\n            const positionInDomain = (value - minDomain) / sizeOfDomain;\n            return positionInDomain * sizeOfRange + minRange;\n        }\n    }\n\n    private _createDivisions(maxValue: number): Array<number> {\n        const arrDivisions: Array<number> = [];\n\n        if (maxValue > 1e7) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e7; i++) {\n                arrDivisions.push(i * 1e7);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e6) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e6; i++) {\n                arrDivisions.push(i * 1e6);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e5) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e5; i++) {\n                arrDivisions.push(i * 1e5);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e4) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e4; i++) {\n                arrDivisions.push(i * 1e4);\n            }\n            return arrDivisions;\n        }\n        else if (maxValue > 1e3) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 1e3; i++) {\n                arrDivisions.push(i * 1e3);\n            }\n            return arrDivisions;\n        } else if (maxValue > 100) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 100; i++) {\n                arrDivisions.push(i * 100);\n            }\n            return arrDivisions;\n        } else if (maxValue > 10) {\n            for (let i = 0; i <= this._roundedValueY(maxValue) / 10; i++) {\n                arrDivisions.push(i * 10);\n            }\n            return arrDivisions;\n        } else {\n            for (let i = 0; i <= maxValue; i++) {\n                arrDivisions.push(i);\n            }\n            return arrDivisions;\n        }\n    }\n\n    private _getBounds(arr: Array<IDataChart>): { minX: number; maxX: number; minY: number; maxY: number} {\n        return {\n            minX: arr.reduce((prev: any, cur: any) =>   cur.domainX < prev.domainX ? cur : prev,\n                                                        { domainX: Infinity }).domainX,\n            maxX: arr.reduce((prev: any, cur: any) =>   cur.domainX > prev.domainX ? cur : prev,\n                                                        { domainX: -Infinity }).domainX,\n            minY: arr.reduce((prev: any, cur: any) =>   cur.domainY < prev.domainY ? cur : prev,\n                                                        { domainY: Infinity }).domainY,\n            maxY: arr.reduce((prev: any, cur: any) =>   cur.domainY > prev.domainY ? cur : prev,\n                                                        { domainY: -Infinity }).domainY\n        }\n    }\n\n    private _getRect(): any {\n        return this.el.nativeElement?.getBoundingClientRect()\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ColorHelpersComponent",
            "id": "component-ColorHelpersComponent-0c43a82e3053551d1d4628cb9840c9c7d2baa151b05152b0ee48f501c2eca85d6791e7696b40139bc6b4f5b14e163c94fecf50af4505e8906f716947822f4d08",
            "file": "src/app/common/color-helpers/color-helpers.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-helpers",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./color-helpers.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { ThemeService } from '../services/theme.services';\n\n@Component({\n    selector: 'app-color-helpers',\n    templateUrl: './color-helpers.component.html'\n})\nexport class ColorHelpersComponent {\n    isDarkMode = false;\n\n    constructor(\n        private srvTheme: ThemeService\n    ) {\n\n    }\n\n    ngOnInit(): void {\n        this.srvTheme.getThemeMode$().subscribe(v => {\n            this.isDarkMode = v === 'dark';\n        });\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "srvTheme",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "srvTheme",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"p-x-24 p-y-32\">\n  <div class=\"grid g-template-columns-2\">\n    <div class=\"mat-subtitle-1 center\"><b>Text colors</b></div>\n    <div class=\"mat-subtitle-1 center\"><b>Background colors</b></div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-primary\">\n      <span>.color-primary</span>\n      <span>{{isDarkMode ? 'rgba(255, 255, 255, .87)' : 'rgba(0, 0, 0, .87)'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-primary\">\n      <span>.bg-primary</span>\n      <span>{{isDarkMode ? '#1E1E1E' : '#f5f5f5'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-secondary\">\n      <span>.color-secondary</span>\n      <span>{{isDarkMode ? 'rgba(255, 255, 255, .6)' : 'rgba(0, 0, 0, .6)'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-secondary\">\n      <span>.bg-secondary</span>\n      <span>{{isDarkMode ? 'rgba(255, 255, 255, .6)' : 'rgba(0, 0, 0, .6)'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-disabled\">\n      <span>.color-disabled</span>\n      <span>{{isDarkMode ? 'rgba(255, 255, 255, .4)' : 'rgba(0, 0, 0, .4)'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-disabled\">\n      <span>.bg-disabled</span>\n      <span>{{isDarkMode ? 'rgba(255, 255, 255, .4)' : 'rgba(0, 0, 0, .4)'}}</span>\n    </div>\n  </div>\n\n  <br>\n  <br>\n\n  <div class=\"grid g-template-columns-2\">\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-accent-primary\">\n      <span>500</span>\n      <span>.color-accent-primary</span>\n      <span>{{isDarkMode ? '#5068ff' : '#1633FF'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-accent-primary\">\n      <span>500</span>\n      <span>.bg-accent-primary</span>\n      <span>{{isDarkMode ? '#5068ff' : '#1633FF'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-accent-primary-light\">\n      <span>50</span>\n      <span>.color-accent-primary-light</span>\n      <span>{{isDarkMode ? '#eaedff' : '#eaedff'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-accent-primary-light\">\n      <span>50</span>\n      <span>.bg-accent-primary-light</span>\n      <span>{{isDarkMode ? '#eaedff' : '#eaedff'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-accent-primary-dark\">\n      <span>700</span>\n      <span>.color-accent-primary-dark</span>\n      <span>{{isDarkMode ? '#4055ff' : '#0B1CB7'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-accent-primary-dark\">\n      <span>700</span>\n      <span>.bg-accent-primary-dark</span>\n      <span>{{isDarkMode ? '#4055ff' : '#0B1CB7'}}</span>\n    </div>\n  </div>\n\n  <br>\n  <br>\n\n  <div class=\"grid g-template-columns-2\">\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-accent-secondary\">\n      <span>200</span>\n      <span>.color-accent-secondary</span>\n      <span>#03DAC5</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-accent-secondary\">\n      <span>200</span>\n      <span>.bg-accent-secondary</span>\n      <span>#03DAC5</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-accent-secondary-light\">\n      <span>50</span>\n      <span>.color-accent-secondary-light</span>\n      <span>#C8FFF4</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-accent-secondary-light\">\n      <span>50</span>\n      <span>.bg-accent-secondary-light</span>\n      <span>#C8FFF4</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-accent-secondary-dark\">\n      <span>700</span>\n      <span>.color-accent-secondary-dark</span>\n      <span>#018786</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-accent-secondary-dark\">\n      <span>700</span>\n      <span>.bg-accent-secondary-dark</span>\n      <span>#018786</span>\n    </div>\n  </div>\n\n  <br>\n  <br>\n\n  <div class=\"grid g-template-columns-2\">\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-warn\">\n      <span>500</span>\n      <span>.color-warn</span>\n      <span>{{isDarkMode ? '#fb735e' : '#f9342a'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-warn\">\n      <span>500</span>\n      <span>.bg-warn</span>\n      <span>{{isDarkMode ? '#fb735e' : '#f9342a'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-warn-light\">\n      <span>100</span>\n      <span>.color-warn-light</span>\n      <span>{{isDarkMode ? '#fed5cf' : '#fdc2bf'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-warn-light\">\n      <span>100</span>\n      <span>.bg-warn-light</span>\n      <span>{{isDarkMode ? '#fed5cf' : '#fdc2bf'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 color-warn-dark\">\n      <span>900</span>\n      <span>.color-warn-dark</span>\n      <span>{{isDarkMode ? '#f84331' : '#f5150f'}}</span>\n    </div>\n    <div class=\"flex-justify-between p-x-16 p-y-16 bg-warn-dark\">\n      <span>900</span>\n      <span>.bg-warn-dark</span>\n      <span>{{isDarkMode ? '#f84331' : '#f5150f'}}</span>\n    </div>\n  </div>\n\n  <br>\n  <br>\n\n  <div class=\"mat-subtitle-1 center\"><b>Text on accent background</b></div>\n\n  <div class=\"grid g-template-columns-2\">\n    <div class=\"flex-justify-between g-column-start-1 g-column-end-3 p-x-16 p-y-16 on-primary-accent\">\n      <span>500</span>\n      <span>.on-primary-accent</span>\n      <span>{{isDarkMode ? '#5068ff' : '#1633FF'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 on-primary-accent-light\">\n      <span>50</span>\n      <span>.on-primary-accent-light</span>\n      <span>{{isDarkMode ? '#EAEDFF' : '#EAEDFF'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 on-primary-accent-dark\">\n      <span>700</span>\n      <span>.on-primary-accent-dark</span>\n      <span>{{isDarkMode ? '#4055ff' : '#0B1CB7'}}</span>\n    </div>\n  </div>\n\n  <br>\n  <br>\n\n  <div class=\"grid g-template-columns-2\">\n    <div class=\"flex-justify-between g-column-start-1 g-column-end-3 p-x-16 p-y-16 on-secondary-accent\">\n      <span>200</span>\n      <span>.on-secondary-accent</span>\n      <span>#03DAC5</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 on-secondary-accent-light\">\n      <span>50</span>\n      <span>.on-secondary-accent-light</span>\n      <span>#C8FFF4</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 on-secondary-accent-dark\">\n      <span>500</span>\n      <span>.on-secondary-accent-dark</span>\n      <span>#018786</span>\n    </div>\n  </div>\n\n  <br>\n  <br>\n\n  <div class=\"grid g-template-columns-2\">\n    <div class=\"flex-justify-between g-column-start-1 g-column-end-3 p-x-16 p-y-16 on-warn-accent\">\n      <span>500</span>\n      <span>.on-warn-accent</span>\n      <span>{{isDarkMode ? '#fb735e' : '#f9342a'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 on-warn-accent-light\">\n      <span>100</span>\n      <span>.on-warn-accent-light</span>\n      <span>{{isDarkMode ? '#fed5cf' : '#fdc2bf'}}</span>\n    </div>\n\n    <div class=\"flex-justify-between p-x-16 p-y-16 on-warn-accent-dark\">\n      <span>900</span>\n      <span>.on-warn-accent-dark</span>\n      <span>{{isDarkMode ? '#f84331' : '#f5150f'}}</span>\n    </div>\n  </div>\n\n  <br>\n  <br>\n\n  <div class=\"mat-subtitle-1 center\"><b>Buttons</b></div>\n\n  <button mat-button>Basic button</button>\n  <button mat-button color=\"primary\" class=\"m-l-16\">Primary button</button>\n  <button mat-button color=\"accent\" class=\"m-l-16\">Accent button</button>\n  <button mat-button color=\"warn\" class=\"m-l-16\">Warn button</button>\n\n  <br>\n  <br>\n\n  <button mat-stroked-button>Basic button</button>\n  <button mat-stroked-button color=\"primary\" class=\"m-l-16\">Primary button</button>\n  <button mat-stroked-button color=\"accent\" class=\"m-l-16\">Accent button</button>\n  <button mat-stroked-button color=\"warn\" class=\"m-l-16\">Warn button</button>\n\n  <br>\n  <br>\n\n  <button mat-flat-button>Basic button</button>\n  <button mat-flat-button color=\"primary\" class=\"m-l-16\">Primary button</button>\n  <button mat-flat-button color=\"accent\" class=\"m-l-16\">Accent button</button>\n  <button mat-flat-button color=\"warn\" class=\"m-l-16\">Warn button</button>\n\n  <br>\n  <br>\n\n  <button mat-raised-button>Basic button</button>\n  <button mat-raised-button color=\"primary\" class=\"m-l-16\">Primary button</button>\n  <button mat-raised-button color=\"accent\" class=\"m-l-16\">Accent button</button>\n  <button mat-raised-button color=\"warn\" class=\"m-l-16\">Warn button</button>\n\n  <br>\n  <br>\n</div>\n"
        },
        {
            "name": "ComponentsComponent",
            "id": "component-ComponentsComponent-bf8d53a5a938da58e2de20c373d6cd6d6704dde493c2584d7f51c184881c947a4b5bf060738bcc3ab05871af6e7d7837155b76ef9f44c71d7cb03aef94ed3318",
            "file": "src/app/components/components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "provideTranslocoScope()"
                }
            ],
            "selector": "app-components",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./components.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeLang",
                    "defaultValue": "this.translocoService.getActiveLang()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "availableLangs",
                    "defaultValue": "this.translocoService.getAvailableLangs() as LangDefinition[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "date",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dynamicCount",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "greetingText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "subscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLang",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { LangDefinition, provideTranslocoScope, TranslocoService } from '@jsverse/transloco';\nimport { TranslocoLocaleService } from '@jsverse/transloco-locale';\nimport { Subscription, take } from 'rxjs';\n\n@Component({\n    selector: 'app-components',\n    templateUrl: './components.component.html',\n    providers: [provideTranslocoScope('firstComponent')]\n})\nexport class ComponentsComponent implements OnDestroy {\n\n    public form: FormGroup;\n\n    private subscription: Subscription | null = null;\n    public availableLangs = this.translocoService.getAvailableLangs() as LangDefinition[];\n    public activeLang = this.translocoService.getActiveLang();\n    public greetingText!: string;\n    public dynamicCount = 10;\n    public date = new Date();\n\n    constructor(\n        private _formBuilder: FormBuilder,\n        private readonly translocoService: TranslocoService,\n        private localeService: TranslocoLocaleService,\n        @Inject(DOCUMENT) private _document: Document\n    ) {\n        this.form = this._formBuilder.group({\n            phone: [''],\n            phoneMenuSuffix: [''],\n            phoneMenuPrefix: ['']\n        });\n\n        this.translocoService\n            .selectTranslate(\"title\", {name: 'Dima'})\n            .subscribe(v => {\n                this.greetingText = v;\n            });\n    }\n\n    ngOnDestroy() {\n        this.subscription?.unsubscribe();\n        this.subscription = null;\n    }\n\n    public changeLang(lang: string): void {\n        // Ensure new active lang is loaded\n        this.subscription?.unsubscribe();\n        this.subscription = this.translocoService\n            .load(lang)\n            .pipe(take(1))\n            .subscribe(() => {\n                this.translocoService.setActiveLang(lang);\n                this.activeLang = this.translocoService.getActiveLang();\n                const doc = this._document.getElementsByTagName(\"html\")[0];\n                doc.setAttribute('lang', this.activeLang);\n                doc.setAttribute('dir', this.activeLang === 'ar' ? 'rtl' : 'ltr');\n            });\n    }\n\n    get currencySymbol() {\n        return this.localeService.getCurrencySymbol();\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localeService",
                        "type": "TranslocoLocaleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localeService",
                        "type": "TranslocoLocaleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "currencySymbol": {
                    "name": "currencySymbol",
                    "getSignature": {
                        "name": "currencySymbol",
                        "type": "",
                        "returnType": "",
                        "line": 63
                    }
                }
            },
            "templateData": "<div class=\"p-x-24 p-y-32\">\n  <h1 class=\"mat-subtitle-1 center upper color-accent-primary\"><b>Transloco</b></h1>\n\n  <br>\n  <br>\n\n  <button\n    mat-button\n    class=\"m-r-16\"\n    *ngFor=\"let lang of availableLangs;\"\n    (click)=\"changeLang(lang.id)\"\n    [class.bg-accent-primary]=\"activeLang === lang.id\">\n    {{ lang.label }}\n  </button>\n\n  <br>\n  <br>\n\n  <h2 class=\"mat-subtitle-1 color-accent-secondary center\">{{ greetingText }}</h2>\n\n  <div class=\"mat-body-1\" transloco=\"text\"></div>\n  <div class=\"mat-body-1\" transloco=\"textKeys\" [translocoParams]=\"{name: 'Dima'}\"></div>\n\n  <br>\n\n  <div class=\"p-l-24\" *transloco=\"let t;\">\n    <h3 class=\"mat-subtitle-1\">{{ t('nested.title') }}</h3>\n    <p class=\"mat-body-1\">{{t('nested.text')}}</p>\n  </div>\n\n  <br>\n  <br>\n\n  <br>\n\n  <ng-container *transloco=\"let t; prefix: 'firstComponent'\">\n    <h3 class=\"mat-subtitle-1 color-accent-secondary center\">{{ t('title', {value: 1}) }}</h3>\n    <p class=\"mat-body-1\">{{t('text', {value: 1})}}</p>\n    <p class=\"mat-body-1\">{{ 'firstComponent.subtext' | transloco: {name: 'Nicol'} }}</p>\n    <p class=\"mat-body-1 color-warn\">{{ t('textWithCount', {dynamicCount}) }}</p>\n    <br>\n    <div class=\"p-l-24\">\n      <h3 class=\"mat-subtitle-1\">{{t('nested.title')}}</h3>\n      <p class=\"mat-body-1\">{{t('nested.text')}}</p>\n    </div>\n    <br>\n    <ul>\n      <li *ngFor=\"let option of t('list');\">\n        <span class=\"mat-body-1\" [innerHTML]=\"option\"></span>\n      </li>\n    </ul>\n    <p class=\"mat-body-1\">{{t('date')}}: {{ date | translocoDate }} </p>\n    <p class=\"mat-body-1\">{{t('numberFormat')}}: {{ 1234567890 | translocoDecimal }} </p>\n    <p class=\"mat-body-1\">{{t('symbol')}}: {{ 1234567890 | translocoCurrency: 'name' }} ({{ currencySymbol }}) </p>\n    <br>\n    <p class=\"mat-body-1 color-warn\">{{t('newKey')}} </p>\n  </ng-container>\n\n  <br>\n  <br>\n  <br>\n  <br>\n\n  <mat-accordion>\n\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <span class=\"mat-body-1\">Info banner</span>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n\n      <app-info-banner [type]=\"'info'\" [matIcon]=\"'info'\"></app-info-banner>\n      <br>\n      <app-info-banner [type]=\"'success'\" [svgIcon]=\"'check-circle'\"></app-info-banner>\n      <br>\n      <app-info-banner [type]=\"'error'\" [matIcon]=\"'error'\"></app-info-banner>\n    </mat-expansion-panel>\n\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <span class=\"mat-body-1\">Custom tooltip</span>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n\n      <div class=\"flex-justify-between p-y-16\">\n        <div class=\"flex-align-center mat-body-1\">\n          <mat-icon class=\"m-r-8 flex-shrink-0\" appTooltip [templateRef]=\"tooltipTemplate\" [position]=\"{y: 'top', x: 'start'}\">\n            info\n          </mat-icon>\n          <b>Show tooltip with top/start position</b>\n        </div>\n\n        <div class=\"flex-align-center mat-body-1\">\n          <b>Show tooltip with bottom/end position</b>\n          <mat-icon class=\"m-l-8 flex-shrink-0\" appTooltip [templateRef]=\"tooltipTemplate\" [position]=\"{y: 'bottom', x: 'end'}\">\n            info\n          </mat-icon>\n        </div>\n      </div>\n\n      <ng-template #tooltipTemplate>\n        <app-tooltip>\n          Test tooltip text\n        </app-tooltip>\n      </ng-template>\n\n    </mat-expansion-panel>\n\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <span class=\"mat-body-1\">Phone fields</span>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n\n      <div class=\"flex-align-center p-y-16\" [formGroup]=\"form\">\n        <app-phone-field [form]=\"form\"></app-phone-field>\n        <app-phone-field-menu-suffix class=\"m-l-24\" [form]=\"form\"></app-phone-field-menu-suffix>\n        <app-phone-field-menu-prefix class=\"m-l-24\" [form]=\"form\"></app-phone-field-menu-prefix>\n      </div>\n\n    </mat-expansion-panel>\n  </mat-accordion>\n\n</div>\n"
        },
        {
            "name": "CustomSelectComponent",
            "id": "component-CustomSelectComponent-6fa62ce85b9f1d4d664af81b62782ea01c8220f45a9f94812b3fe0c7d39817731d8d049a8dcfbb0893054d02a53edbef6a8c9becb26011fee5946cf59c088693",
            "file": "src/app/components/dashboard/custom-select/custom-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-custom-select",
            "styleUrls": [
                "./custom-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ICustomSelect",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Array<ICustomSelect>",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<{ option: ICustomSelect, index?: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ICustomSelect>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "lableObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICustomSelect",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "ICustomSelect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "ICustomSelect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nexport interface ICustomSelect {\n    date: Date; optionValue: string; label?: string;\n}\n\n@Component({\n    selector: 'app-custom-select',\n    templateUrl: './custom-select.component.html',\n    styleUrls: ['./custom-select.component.scss']\n})\nexport class CustomSelectComponent implements OnInit {\n    @Input() public current!: ICustomSelect;\n    @Input() public options!: Array<ICustomSelect>;\n    @Input() public type = 1;\n    @Output() public selected = new EventEmitter<{ option: ICustomSelect, index?: number }>();\n\n    public data!: Array<ICustomSelect>;\n    public lableObj!: ICustomSelect;\n\n    public ngOnInit(): void {\n        this.data = this.options;\n        this.lableObj = this.data.filter(option => !!option.label)[0];\n    }\n\n    public selectedOption(option: ICustomSelect, index?: number): void {\n        this.current = option;\n\n        if (index) {\n            this.selected.emit({ option: option, index: index})\n        } else {\n            this.selected.emit({ option: option })\n        }\n\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-mdc-icon-button {\n  display: inline-flex;\n  align-items: center;\n  width: 1.5rem; // 32px\n  height: 1.5rem; // 32px\n  line-height: 1.5rem;\n  padding: 0;\n  vertical-align: middle;\n}\n\n.color-light {\n  color: var(--colors-light-outline-variant);\n}\n",
                    "styleUrl": "./custom-select.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex_center\">\n  <span [ngClass]=\"type === 1 ? 'subtitle font-medium' : 'textBody1 color-light'\">\n    <ng-container *ngIf=\"current.label\">{{current.label}}</ng-container>\n    <ng-container *ngIf=\"!current.label\">\n      <ng-container *ngIf=\"type === 1\">\n        {{current.optionValue.charAt(0).toUpperCase() + current.optionValue.slice(1)}}\n      </ng-container>\n      <ng-container *ngIf=\"type !== 1\">\n        {{current.optionValue}}\n      </ng-container>\n    </ng-container>\n  </span>\n  <button\n    mat-icon-button\n    class=\"m-l-8\"\n    [ngStyle]=\"{'transform': menuTriger.menuOpen ? 'rotate(180deg)' : null}\"\n    [matMenuTriggerFor]=\"menu\" #menuTriger=\"matMenuTrigger\">\n    <mat-icon>{{menuTriger.menuOpen ? 'arrow_drop_up' : 'arrow_drop_down'}}</mat-icon>\n  </button>\n</div>\n\n<mat-menu #menu=\"matMenu\">\n  <button mat-menu-item (click)=\"selectedOption(lableObj, 0)\" *ngIf=\"!!lableObj\">\n    <span class=\"flex_between_center color-on-background\">\n      <span>{{lableObj.label}}</span>\n      <mat-icon *ngIf=\"current === lableObj\">done</mat-icon>\n    </span>\n  </button>\n\n  <ng-container *ngFor=\"let option of data; let i = index\">\n    <button mat-menu-item *ngIf=\"option !== lableObj\" (click)=\"selectedOption(option, i)\">\n      <span class=\"flex_between_center color-on-background\">\n        <span *ngIf=\"type === 1\">{{option.optionValue.charAt(0).toUpperCase() + option.optionValue.slice(1)}}</span>\n        <span *ngIf=\"type !== 1\">{{option.optionValue}}</span>\n        <mat-icon *ngIf=\"current === option\">done</mat-icon>\n      </span>\n    </button>\n  </ng-container>\n\n</mat-menu>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-fa7941fa94d147d74310c03e15328387592c520598551a460c3957678cd3f968303ad27ba8c9371a596797f27fa7a02bab4da3932510cad2cc61aab4699d365c",
            "file": "src/app/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IDataChart>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chartSettings",
                    "defaultValue": "{\n        orientationAxisY: 'toTop', // toTop or toBottom orientation for Y axis\n        bar: {\n            gap: 10, // spacing between bar\n            radius: 12, // radius for bar\n            indentAxisX: 54, // intent from left\n            indentAxisY: 30 // indent from top/bottom\n        },\n        axisY: {\n            borderStyle: { // border styles\n                type: 'dashed',\n                strokeWidth: 4,\n            },\n            indentAxisX: 0, // intent from left\n            indentAxisY: 30 // intent from top/bottom\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentClasses",
                    "defaultValue": "'overflow-y'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICustomSelect",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentMonthesPeriod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ICustomSelect>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentMonthIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "previousMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICustomSelect",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "previousMonthesPeriod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ICustomSelect>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeCurrentMonth",
                    "args": [
                        {
                            "name": "selected",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePreviousMonth",
                    "args": [
                        {
                            "name": "selected",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computedPeriodOptions",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "startDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'overflow-y'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\nimport { IChartSettings, IDataChart } from './bar-chart/bar-chart.component';\nimport { ICustomSelect } from './custom-select/custom-select.component';\n\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.scss'],\n    providers: [DatePipe]\n})\nexport class DashboardComponent implements OnInit {\n    @HostBinding('class') public currentClasses = 'overflow-y';\n\n    public currentMonth!: ICustomSelect;\n    public currentMonthIndex = 0;\n    public currentMonthesPeriod!: Array<ICustomSelect>;\n\n    public previousMonth!: ICustomSelect;\n    public previousMonthesPeriod!: Array<ICustomSelect>;\n\n    public chartData: Array<IDataChart> = [];\n\n    public chartSettings: IChartSettings = {\n        orientationAxisY: 'toTop', // toTop or toBottom orientation for Y axis\n        bar: {\n            gap: 10, // spacing between bar\n            radius: 12, // radius for bar\n            indentAxisX: 54, // intent from left\n            indentAxisY: 30 // indent from top/bottom\n        },\n        axisY: {\n            borderStyle: { // border styles\n                type: 'dashed',\n                strokeWidth: 4,\n            },\n            indentAxisX: 0, // intent from left\n            indentAxisY: 30 // intent from top/bottom\n        }\n    }\n\n    constructor(\n        private datePipe: DatePipe\n    ) {\n    }\n\n    public ngOnInit(): void {\n        this.computedPeriodOptions(new Date());\n    }\n\n    public computedPeriodOptions(startDate: any): void {\n        this.currentMonthesPeriod = [];\n        this.previousMonthesPeriod = [];\n\n        for (let i = 0; i < 12; i++) {\n            // Current period\n            let currentDate = new Date();\n            currentDate.setMonth(currentDate.getMonth() - i);\n            let currentPeriodMonth = currentDate.toLocaleString(\"default\", { month: \"long\" });\n            let currentPeriodYear = currentDate.getFullYear();\n            let monthNumber = currentDate.getMonth();\n\n            // Previos period\n            let previousDate = new Date(startDate);\n            previousDate.setMonth(startDate.getMonth() - i - 1);\n            let previousPeriodMonth = previousDate.toLocaleString(\"default\", { month: \"long\" });\n            let previousPeriodYear = previousDate.getFullYear();\n\n            if (monthNumber === new Date().getMonth()) {\n                this.currentMonthesPeriod.push({\n                    date: currentDate,\n                    optionValue: currentPeriodMonth,\n                    label: 'This month'\n                });\n            } else if (monthNumber < new Date().getMonth()) {\n                this.currentMonthesPeriod.push({\n                    date: currentDate,\n                    optionValue: currentPeriodMonth\n                });\n            } else {\n                this.currentMonthesPeriod.push({\n                    date: currentDate,\n                    optionValue: currentPeriodMonth + ' ' + currentPeriodYear\n                });\n            }\n\n            this.previousMonthesPeriod.push({\n                date: previousDate,\n                optionValue: 'vs ' + previousPeriodMonth + ' ' + previousPeriodYear\n            });\n        }\n\n        this.currentMonth = this.currentMonthesPeriod[this.currentMonthIndex];\n        this.previousMonth = this.previousMonthesPeriod[0];\n\n        this.setData(this.currentMonth.date);\n    }\n\n    public changeCurrentMonth(selected: { option: ICustomSelect, index?: number }): void {\n        if (selected.index) {\n            this.currentMonthIndex = selected.index;\n        }\n        this.computedPeriodOptions(selected.option.date);\n    }\n\n    public changePreviousMonth(selected: { option: ICustomSelect; index?: number }): void {\n        // TODO\n    }\n\n    public setData(date: any): void {\n        const daysOfCurrentMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n        this.chartData = [];\n\n        for (let i = 0; i < daysOfCurrentMonth; i++) {\n            const testValue = Math.floor(Math.random() * 100) + 1;\n            this.chartData.push({\n                domainX: i + 1,\n                domainY: testValue,\n                labelX: `${i + 1} ${this.datePipe.transform(new Date(date), 'MMM')}`,\n                prefixY: '$',\n                tooltip: `${i + 1} ${this.datePipe.transform(new Date(date), 'MMM')} $${testValue}`\n            });\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  min-height: auto;\n  padding: 54px 40px 40px;\n\n  @media (max-width: 670px) {\n    padding: 54px 24px 40px;\n  }\n}\n\n.mdc-card {\n  padding: 24px 16px;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <app-custom-select\n    [current]=\"currentMonth\"\n    [options]=\"currentMonthesPeriod\"\n    [type]=\"1\"\n    (selected)=\"changeCurrentMonth($event)\">\n  </app-custom-select>\n\n  <br>\n\n  <app-custom-select\n    [current]=\"previousMonth\"\n    [options]=\"previousMonthesPeriod\"\n    [type]=\"2\"\n    (selected)=\"changePreviousMonth($event)\">\n  </app-custom-select>\n\n  <br>\n\n  <app-bar-chart [chartSettings]=\"chartSettings\" [data]=\"chartData\"></app-bar-chart>\n</mat-card>\n"
        },
        {
            "name": "DropdownMenuComponent",
            "id": "component-DropdownMenuComponent-09df6ee3eca3824e19ed08e09558927d177f8fefcaab78eae7881490996b39a67594c1df318e75b942d20a83f0370542a2f9a9c3f209e37dfb3b0c62ab92c793",
            "file": "src/app/common/web-header/header/dropdown-menu/dropdown-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown-menu",
            "styleUrls": [
                "./dropdown-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "hideMenu",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdown'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\n\nimport { DropdownService } from 'src/app/common/services/dropdown.service';\n\n@Component({\n    selector: 'app-dropdown-menu',\n    templateUrl: './dropdown-menu.component.html',\n    styleUrls: ['./dropdown-menu.component.scss']\n})\nexport class DropdownMenuComponent implements OnInit {\n    @Output() public hideMenu = new EventEmitter<boolean>();\n    @ViewChild('dropdown') public dropdown!: ElementRef;\n\n    constructor(\n        private _dropdownSrv: DropdownService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this._dropdownSrv.getDropdownPosition$().subscribe(position => {\n            this.dropdown.nativeElement.style.left = position + 'px';\n            this.dropdown.nativeElement.style.maxWidth = (window.innerWidth - position) + 'px';\n        });\n\n    }\n\n    closeMenu(): void {\n        this.hideMenu.emit(false);\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media only screen and (min-width: 990px) {\n  :host-context(.open-dropdown) .dropdownMenu {\n    transform: scaleY(1);\n    opacity: 1;\n    pointer-events: auto;\n    visibility: visible;\n  }\n\n  .dropdownMenu {\n    position: fixed;\n    top: 64px;\n    display: flex;\n    flex-direction: column;\n    width: 940px;\n    max-width: 100%;\n    margin: 0 auto;\n    padding: 16px;\n    background-color: var(--surface);\n    box-shadow: 0 2px 4px var(--border-color);\n    transform: scale(0);\n    transform-origin: top center;\n    transition: transform .25s;\n    overflow: hidden;\n    opacity: 0;\n    visibility: hidden;\n    pointer-events: none;\n    z-index: 103;\n\n    >.mdc-icon-button {\n      margin-left: auto;\n    }\n  }\n}\n",
                    "styleUrl": "./dropdown-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dropdownSrv",
                        "type": "DropdownService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_dropdownSrv",
                        "type": "DropdownService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div #dropdown class=\"dropdownMenu\" (mouseleave)=\"closeMenu()\">\n\n  <button mat-icon-button (click)=\"closeMenu()\">\n    <mat-icon>close</mat-icon>\n  </button>\n\n  <p>\n    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Ipsam dolorum corporis architecto dolore! Vero assumenda tenetur id iusto, eligendi exercitationem!\n  </p>\n\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-237faf2fcb8a8047139fa91c46098d16c2e6783879102c2ced4d5adb084fb52ef8e32cf88bc05cbf5de3a2c35a74fa18f24f774035d21644ff0cee532ad7c265-1",
            "file": "src/app/common/web-header/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'header', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isOpenDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isOpenMatMenu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "matMenuList",
                    "defaultValue": "[\n        {\n            icon: 'settings',\n            text: 'Agendar Capacitación'\n        },\n        {\n            icon: 'star',\n            text: 'Contactar soporte'\n        },\n        {\n            icon: 'apps',\n            text: 'Contactar con ventas'\n        }\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IMatMenuList>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDropdownMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDropdownMenu",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';\n\nimport { DropdownService } from '../../services/dropdown.service';\n\ninterface IMatMenuList {\n    icon: string;\n    text: string;\n}\n\n@Component({\n    selector: 'app-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n    @ViewChild('header', { static: true }) header!: ElementRef;\n\n    isOpenMatMenu = false;\n    isOpenDropdown = false;\n\n    matMenuList: Array<IMatMenuList> = [\n        {\n            icon: 'settings',\n            text: 'Agendar Capacitación'\n        },\n        {\n            icon: 'star',\n            text: 'Contactar soporte'\n        },\n        {\n            icon: 'apps',\n            text: 'Contactar con ventas'\n        }\n    ];\n\n    constructor(\n        private renderer: Renderer2,\n        private _dropdownSrv: DropdownService\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    openDropdownMenu(ev: any): void {\n        this.isOpenDropdown = true;\n\n        setTimeout(() => {\n            this._dropdownSrv.setDropdownPosition(ev.target.getBoundingClientRect().left);\n            this.renderer.addClass(document.body, 'open-dropdown');\n        }, 100);\n    }\n\n    closeDropdownMenu(): void {\n        this.renderer.removeClass(document.body, 'open-dropdown');\n        this.isOpenDropdown = false;\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host-context(.fixed-header) .wrapHeader {\n  box-shadow: 0 2px 4px var(--border-color);\n  transition: all .2s ease-in-out;\n}\n\n.wrapHeader {\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 101;\n  display: flex;\n  width: 100%;\n  min-height: 64px;\n  background-color: var(--primaryBackground);\n\n  &__container {\n    display: flex;\n    align-items: center;\n    width: 1280px;\n    max-width: 100%;\n    padding: 0 40px;\n    margin: 0 auto;\n  }\n\n  &__nav {\n    margin-left: 24px;\n  }\n\n  &__list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    column-gap: 16px;\n\n    li {\n      > * {\n        color: var(--primaryText);\n        cursor: pointer;\n      }\n\n      a {\n        text-decoration: none;\n      }\n    }\n  }\n\n  &__btn-menu {\n    margin-left: auto;\n  }\n\n  .logo {\n    text-transform: uppercase;\n    text-decoration: none;\n  }\n\n  .humburger {\n    display: none;\n  }\n}\n\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dropdownSrv",
                        "type": "DropdownService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dropdownSrv",
                        "type": "DropdownService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header #header class=\"wrapHeader\">\n  <div class=\"wrapHeader__container\">\n    <a class=\"logo mat-body-1 color-accent-primary\" [routerLink]=\"['/']\">\n      <b>Logo</b>\n    </a>\n\n    <nav class=\"wrapHeader__nav\">\n      <ul class=\"wrapHeader__list\">\n        <li><b (mouseenter)=\"openDropdownMenu($event)\">Dropdown</b></li>\n        <li><a href=\"/\"><b>Point 1</b></a></li>\n        <li><a href=\"/\"><b>Point 2</b></a></li>\n        <li><a href=\"/\"><b>Point 3</b></a></li>\n      </ul>\n    </nav>\n\n    <button\n      class=\"wrapHeader__btn-menu\"\n      mat-button\n      [matMenuTriggerFor]=\"headerMenu\"\n      (menuOpened)=\"isOpenMatMenu = true\"\n      (menuClosed)=\"isOpenMatMenu = false\">\n      <span class=\"flex-center-center\">\n        <b>Open menu</b>\n        <span class=\"material-symbols-outlined\">{{isOpenMatMenu ? 'keyboard_arrow_up' : 'keyboard_arrow_down'}}</span>\n      </span>\n    </button>\n\n    <mat-menu #headerMenu=\"matMenu\" class=\"matMenuHader\">\n      <button mat-menu-item *ngFor=\"let item of matMenuList\">\n        <b>{{item.text}}</b>\n      </button>\n    </mat-menu>\n\n    <button class=\"m-l-8\" mat-stroked-button color=\"primary\">\n      <span>Header button</span>\n    </button>\n\n    <button mat-icon-button class=\"humburger\">\n      <span class=\"material-symbols-outlined\">menu</span>\n    </button>\n  </div>\n</header>\n\n<app-dropdown-menu (hideMenu)=\"closeDropdownMenu()\" *ngIf=\"isOpenDropdown\"></app-dropdown-menu>\n"
        },
        {
            "name": "InfoBannerComponent",
            "id": "component-InfoBannerComponent-65f2c1ce793f50a13e39fd7e70991f49b52d0c5ad897ac45333282299224243222fe976ee0857cc14646d32367e16f701b10bb11b66ca96b3443c923e0dd1df3",
            "file": "src/app/components/info-banner/info-banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-banner",
            "styleUrls": [
                "./info-banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-banner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "matIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "svgIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n    selector: 'app-info-banner',\n    templateUrl: './info-banner.component.html',\n    styleUrls: ['./info-banner.component.scss']\n})\nexport class InfoBannerComponent {\n    @Input() type = 'info';\n    @Input() matIcon?: string;\n    @Input() svgIcon?: string;\n\n    constructor(\n        iconRegistry: MatIconRegistry,\n        sanitizer: DomSanitizer\n    ) {\n        iconRegistry.addSvgIconSet(sanitizer.bypassSecurityTrustResourceUrl('./assets/images/icons/set.svg'))\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".infoBanner {\n  display: flex;\n  align-items: center;\n  padding: 10px 16px;\n  border-radius: 8px;\n  border: 1px solid transparent;\n\n  .material-symbols-outlined,\n  .mat-icon {\n    flex-shrink: 0;\n    margin-right: 16px;\n  }\n\n  p {\n    margin-bottom: 0;\n  }\n}\n\n.info {\n  color: var(--primaryAccent);\n  background-color: var(--primaryAccentLight);\n  border-color: var(--borderPrimaryAccentLight);\n}\n\n.success {\n  color: var(--secondaryAccent);\n  background-color: var(--secondaryAccentLight);\n  border-color: var(--borderSecondaryAccentLight);\n}\n\n.error {\n  color: var(--warn);\n  background-color: var(--warnLight);\n  border-color: var(--borderWarnLight);\n}\n",
                    "styleUrl": "./info-banner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"infoBanner\" [ngClass]=\"type\">\n  <span class=\"material-symbols-outlined font-size-24\" *ngIf=\"matIcon\">{{matIcon}}</span>\n  <mat-icon [svgIcon]=\"svgIcon\" class=\"size-24\" *ngIf=\"svgIcon\"></mat-icon>\n  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad maxime eveniet quis sed vitae sint nobis aspernatur optio fuga officiis.</p>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PhoneFieldComponent",
            "id": "component-PhoneFieldComponent-d1eb30a1e23287a1e4e7ea27700f7b9613597f2bdb07897f05d354050dca15e5db39dcdaf69ba4b285d6a5388b1bbdf3d4f22bb2f07eab0112526a96cce864f9",
            "file": "src/app/components/form/phone-field/phone-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-phone-field",
            "styleUrls": [
                "./phone-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./phone-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contact",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "contactList",
                    "defaultValue": "CONTACTS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contact[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "TLD",
                    "defaultValue": "'cl'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getContact",
                    "args": [
                        {
                            "name": "TLD",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Contact",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "TLD",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Contact, CONTACTS } from '../data-contacts';\n\n@Component({\n    selector: 'app-phone-field',\n    templateUrl: './phone-field.component.html',\n    styleUrls: ['./phone-field.component.scss']\n})\nexport class PhoneFieldComponent {\n    @Input() public form!: FormGroup;\n\n    public contact: Contact;\n    public contactList: Contact[] = CONTACTS;\n    public TLD = 'cl';\n\n    constructor() {\n        this.contact = this._getContact(this.TLD);\n    }\n\n    private _getContact(TLD: string): Contact {\n        const aux = (TLD === 'mx' ? 'me' : TLD);\n        return this.contactList.filter(c => c.country_code === aux)[0];\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".formFiled__phone {\n  &-country {\n    display: inline-flex;\n    align-items: center;\n    column-gap: 8px;\n    margin-right: 8px;\n    vertical-align: middle;\n\n    span {\n      color: var(--secondaryText);\n    }\n  }\n\n  input {\n    vertical-align: middle;\n  }\n}\n",
                    "styleUrl": "./phone-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": [],
            "templateData": "<mat-form-field appearance=\"outline\" class=\"formFiled__phone\" floatLabel=\"always\" [formGroup]=\"form\">\n  <mat-label>Teléfono</mat-label>\n  <input matInput type=\"text\" formControlName=\"phone\">\n\n  <span matTextPrefix>\n    <span class=\"formFiled__phone-country\">\n      <img [src]=\"contact.flag_url\" [alt]=\"contact.country\" width=\"24px\" height=\"17px\">\n      <span>{{contact.phone_code}}</span>\n    </span>\n  </span>\n</mat-form-field>\n"
        },
        {
            "name": "PhoneFieldMenuPrefixComponent",
            "id": "component-PhoneFieldMenuPrefixComponent-901ac21ad9bdab22d7a490b3c50766147df90ec6db19047c5cec8961f958237f9c9b0af53d9f9b36557160f8f54fcee1ae1dea0fcb19d6da2be4cb645197d77d",
            "file": "src/app/components/form/phone-field-menu-prefix/phone-field-menu-prefix.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-phone-field-menu-prefix",
            "styleUrls": [
                "./phone-field-menu-prefix.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./phone-field-menu-prefix.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contact",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "contactList",
                    "defaultValue": "CONTACTS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contact[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "TLD",
                    "defaultValue": "'cl'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getContact",
                    "args": [
                        {
                            "name": "TLD",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Contact",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "TLD",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Contact, CONTACTS } from '../data-contacts';\n\n@Component({\n    selector: 'app-phone-field-menu-prefix',\n    templateUrl: './phone-field-menu-prefix.component.html',\n    styleUrls: ['./phone-field-menu-prefix.component.scss']\n})\nexport class PhoneFieldMenuPrefixComponent {\n    @Input() public form!: FormGroup;\n\n    public contact: Contact;\n    public contactList: Contact[] = CONTACTS;\n    public TLD = 'cl';\n\n    constructor() {\n        this.contact = this._getContact(this.TLD);\n    }\n\n    private _getContact(TLD: string): Contact {\n        const aux = (TLD === 'mx' ? 'me' : TLD);\n        return this.contactList.filter(c => c.country_code === aux)[0];\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".formFiled__phone {\n  &-country {\n    display: inline-flex;\n    align-items: center;\n    column-gap: 8px;\n    margin-right: 8px;\n    vertical-align: middle;\n\n    .mat-mdc-menu-trigger {\n      display: inline-flex;\n      column-gap: 4px;\n    }\n\n    span {\n      color: var(--secondaryText);\n    }\n  }\n\n  input {\n    vertical-align: middle;\n  }\n\n  .mdc-icon-button {\n    width: 32px;\n    height: 32px;\n    font-size: 32px;\n    line-height: 32px;\n    padding: 0;\n    vertical-align: middle;\n  }\n}\n\n.mat-mdc-menu-item {\n  img {\n    vertical-align: middle;\n  }\n}\n",
                    "styleUrl": "./phone-field-menu-prefix.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": [],
            "templateData": "<mat-form-field appearance=\"outline\" class=\"formFiled__phone\" floatLabel=\"always\" [formGroup]=\"form\">\n  <mat-label>Teléfono</mat-label>\n  <input matInput type=\"text\" formControlName=\"phoneMenuPrefix\">\n\n  <span matTextPrefix>\n    <span class=\"formFiled__phone-country\">\n      <span [matMenuTriggerFor]=\"menuCountry\">\n        <img [src]=\"contact.flag_url\" [alt]=\"contact.country\" width=\"24px\" height=\"17px\">\n        <mat-icon svgIcon=\"angle-small-down\"></mat-icon>\n      </span>\n      <span>{{contact.phone_code}}</span>\n    </span>\n  </span>\n</mat-form-field>\n\n<mat-menu #menuCountry=\"matMenu\" xPosition=\"before\">\n  <button mat-menu-item *ngFor=\"let option of contactList\" (click)=\"contact = option\">\n    <img [src]=\"option.flag_url\" [alt]=\"option.country\" width=\"24px\" height=\"17px\" class=\"m-r-8\">\n    <span class=\"mat-body-2\"><b>{{option.city}}, </b> {{option.country}}</span>\n  </button>\n</mat-menu>\n"
        },
        {
            "name": "PhoneFieldMenuSuffixComponent",
            "id": "component-PhoneFieldMenuSuffixComponent-ce83a10bd2adb549c1f28f2b56f96a977fc8bbe3ce2d86b9760513db650702f715568c8bf199debffefd9c8dcdf7c5bd2089014b865dc0ccca506d2402599e95",
            "file": "src/app/components/form/phone-field-menu-suffix/phone-field-menu-suffix.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-phone-field-menu-suffix",
            "styleUrls": [
                "./phone-field-menu-suffix.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./phone-field-menu-suffix.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contact",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "contactList",
                    "defaultValue": "CONTACTS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Contact[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "TLD",
                    "defaultValue": "'cl'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getContact",
                    "args": [
                        {
                            "name": "TLD",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Contact",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "TLD",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Contact, CONTACTS } from '../data-contacts';\n\n@Component({\n    selector: 'app-phone-field-menu-suffix',\n    templateUrl: './phone-field-menu-suffix.component.html',\n    styleUrls: ['./phone-field-menu-suffix.component.scss']\n})\nexport class PhoneFieldMenuSuffixComponent {\n    @Input() public form!: FormGroup;\n\n    public contact: Contact;\n    public contactList: Contact[] = CONTACTS;\n    public TLD = 'cl';\n\n    constructor() {\n        this.contact = this._getContact(this.TLD);\n    }\n\n    private _getContact(TLD: string): Contact {\n        const aux = (TLD === 'mx' ? 'me' : TLD);\n        return this.contactList.filter(c => c.country_code === aux)[0];\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".formFiled__phone {\n  &-country {\n    display: inline-flex;\n    align-items: center;\n    column-gap: 8px;\n    margin-right: 8px;\n    vertical-align: middle;\n\n    span {\n      color: var(--secondaryText);\n    }\n  }\n\n  input {\n    vertical-align: middle;\n  }\n\n  .mdc-icon-button {\n    width: 32px;\n    height: 32px;\n    font-size: 32px;\n    line-height: 32px;\n    padding: 0;\n    vertical-align: middle;\n  }\n}\n\n.mat-mdc-menu-item {\n  img {\n    vertical-align: middle;\n  }\n}\n",
                    "styleUrl": "./phone-field-menu-suffix.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": [],
            "templateData": "<mat-form-field appearance=\"outline\" class=\"formFiled__phone\" floatLabel=\"always\" [formGroup]=\"form\">\n  <mat-label>Teléfono</mat-label>\n  <input matInput type=\"text\" formControlName=\"phoneMenuSuffix\">\n\n  <span matTextPrefix>\n    <span class=\"formFiled__phone-country\">\n      <img [src]=\"contact.flag_url\" [alt]=\"contact.country\" width=\"24px\" height=\"17px\">\n      <span>{{contact.phone_code}}</span>\n    </span>\n  </span>\n\n  <button mat-icon-button matTextSuffix [matMenuTriggerFor]=\"menuCountry\">\n    <mat-icon svgIcon=\"angle-small-down\"></mat-icon>\n  </button>\n</mat-form-field>\n\n<mat-menu #menuCountry=\"matMenu\" xPosition=\"before\">\n  <button mat-menu-item *ngFor=\"let option of contactList\" (click)=\"contact = option\">\n    <img [src]=\"option.flag_url\" [alt]=\"option.country\" width=\"24px\" height=\"17px\" class=\"m-r-8\">\n    <span class=\"mat-body-2\"><b>{{option.city}}, </b> {{option.country}}</span>\n  </button>\n</mat-menu>\n"
        },
        {
            "name": "SidenavComponent",
            "id": "component-SidenavComponent-2a8ddc2bcee7af7ae2c0cbc1a13908ac0c6445403eec3dd0c02651ecf4437455fb95e8a46d73e5655b10b79767793308e20636c2d4591675ffb9a005c4372648",
            "file": "src/app/common/sidenav/sidenav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidenav",
            "styleUrls": [
                "./sidenav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sidebarState",
                    "defaultValue": "new EventEmitter(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "scale",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translocoService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslocoService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeThemeMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toScale",
                    "args": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\nimport { TranslocoService } from '@jsverse/transloco';\n\nimport { ThemeService } from '../services/theme.services';\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.scss']\n})\nexport class SidenavComponent implements OnInit {\n    @Input() isOpen: boolean;\n    @Output() sidebarState = new EventEmitter(true);\n\n    isChecked = false;\n    scale = 0;\n\n    constructor(\n        private renderer: Renderer2,\n        private srvTheme: ThemeService,\n        public translocoService: TranslocoService\n    ) {\n        this.isOpen = true;\n    }\n\n    ngOnInit(): void {\n        this.srvTheme.setThemeMode();\n        this.srvTheme.getThemeMode$().subscribe(v => {\n            this.isChecked = v === 'dark';\n            if (this.isChecked ) {\n                this.renderer.addClass(document.body, 'dark');\n            } else {\n                this.renderer.removeClass(document.body, 'dark');\n            }\n        });\n\n        // set scale from localStorage\n        if (localStorage.getItem('scale') !== null) {\n            this.renderer.addClass(document.body.parentElement, 'scale-' + localStorage.getItem('scale'));\n            this.scale = Number(localStorage.getItem('scale'));\n        }\n    }\n\n    changeThemeMode(): void {\n        this.srvTheme.setThemeMode(!this.isChecked ? 'dark' : 'light');\n    }\n\n    toggle(): void {\n        this.isOpen = !this.isOpen;\n        this.sidebarState.emit(this.isOpen);\n    }\n\n    toScale(type: number): void {\n        if (type === 1) {\n            if (this.scale < 2) {\n                this.renderer.removeClass(document.body.parentElement, 'scale-' + this.scale);\n                localStorage.removeItem('scale');\n                this.scale++;\n            }\n        } else {\n            if (this.scale > -2) {\n                this.renderer.removeClass(document.body.parentElement, 'scale-' + this.scale);\n                localStorage.removeItem('scale');\n                this.scale--;\n            }\n        }\n        if (this.scale !== 0) {\n            this.renderer.addClass(document.body.parentElement, 'scale-' + this.scale);\n            localStorage.setItem('scale', this.scale + '');\n        }\n    }\n\n    get currencyLang() {\n        return this.translocoService.getActiveLang();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host-context(.mat-drawer-opened) {\n  .sidenav__top .accessibility,\n  .sidenav__body {\n    opacity: 1;\n    visibility: visible;\n  }\n\n  .sidenav__top > .mdc-icon-button {\n    opacity: 0;\n  }\n}\n\n:host-context([dir=\"rtl\"]) {\n  .sidenav__top >.mdc-icon-button {\n    left: -1rem;\n    right: initial;\n  }\n}\n\n.sidenav {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  transition: width .2s;\n\n  &:hover {\n    .sidenav__top > .mdc-icon-button {\n      opacity: 1 !important;\n    }\n  }\n\n  &__top {\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    min-height: 54px;\n    border-bottom: 1px solid var(--border-color);\n\n    .accessibility {\n      opacity: 0;\n      visibility: hidden;\n      transition: .2s;\n    }\n\n    > .mdc-icon-button {\n      position: absolute;\n      border: 1px solid var(--border-color);\n      background-color: var(--primaryBackground);\n      top: 50%;\n      right: -1rem;\n      transform: translateY(-50%);\n      transition: opacity .2s;\n    }\n  }\n\n  &__body {\n    display: flex;\n    flex-direction: column;\n    opacity: 0;\n    transition: .2s;\n  }\n}\n\n.accessibility {\n  display: flex;\n  align-items: center;\n  column-gap: 4px;\n}\n",
                    "styleUrl": "./sidenav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "srvTheme",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "srvTheme",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translocoService",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "currencyLang": {
                    "name": "currencyLang",
                    "getSignature": {
                        "name": "currencyLang",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            },
            "templateData": "<div class=\"sidenav\">\n  <div class=\"sidenav__top p-l-16\">\n    <div class=\"accessibility\">\n      <mat-slide-toggle\n        [(ngModel)]=\"isChecked\"\n        (toggleChange)=\"changeThemeMode()\"\n        labelPosition=\"before\"\n        color=\"primary\">\n        <span class=\"m-r-8\">{{isChecked ? 'Dark' : 'Light'}}</span>\n      </mat-slide-toggle>\n      <mat-icon>text_fields</mat-icon>\n      <button mat-icon-button class=\"size-32\" (click)=\"toScale(1)\" [disabled]=\"scale > 1\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <button mat-icon-button class=\"size-32\" (click)=\"toScale(2)\" [disabled]=\"scale < -1\">\n        <mat-icon>remove</mat-icon>\n      </button>\n    </div>\n\n    <button mat-icon-button class=\"size-32\" (click)=\"toggle()\">\n      <span class=\"material-symbols-outlined\" *ngIf=\"currencyLang !== 'ar'\">chevron_right</span>\n      <span class=\"material-symbols-outlined\" *ngIf=\"currencyLang === 'ar'\">chevron_left</span>\n    </button>\n  </div>\n  <div class=\"sidenav__body\">\n    <mat-nav-list>\n      <a mat-list-item [routerLink]=\"['/typography']\" [routerLinkActive]=\"'active'\">Typography</a>\n      <a mat-list-item [routerLink]=\"['/colors-scheme']\" [routerLinkActive]=\"'active'\">Colors scheme</a>\n      <a mat-list-item [routerLink]=\"['/components']\" [routerLinkActive]=\"'active'\">Components</a>\n      <a mat-list-item [routerLink]=\"['/web-header']\" [routerLinkActive]=\"'active'\">Website header</a>\n      <a mat-list-item [routerLink]=\"['/dashboard']\" [routerLinkActive]=\"'active'\">Dashboard</a>\n      <a mat-list-item [routerLink]=\"['/icons']\" [routerLinkActive]=\"'active'\">SVG icons</a>\n      <a mat-list-item [routerLink]=\"['/slider']\" [routerLinkActive]=\"'active'\">Slider</a>\n    </mat-nav-list>\n  </div>\n</div>\n"
        },
        {
            "name": "SliderComponent",
            "id": "component-SliderComponent-fcd1899e71949600a7e48237f662fe4b60bb314300279161b812335964f951837a372b28f2eecb26c243fe8d852bcad65303deac423ed475c9c849c9817ee908",
            "file": "src/app/common/slider/slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "drag",
                    "defaultValue": "{\n        pressed: false, startPosition: 0, newPosition: 0\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isNextDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isPrevDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "itemsVisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "move",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "slider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'carousel'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "sliderData",
                    "defaultValue": "[\n        {\n            title: 'Slide 1',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 2',\n            suptitle: 'Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 3',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 4',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 5',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 6',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 7',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 8',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        }\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ISlider>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sliderProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISliderProps",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_checkTouchDevice",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dragging",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "initSlider",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "moveSlider",
                    "args": [
                        {
                            "name": "direction",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, Component, ElementRef, HostListener, Inject, OnDestroy, PLATFORM_ID, ViewChild } from '@angular/core';\n\ninterface ISlider {\n    title: string;\n    suptitle: string;\n}\n\ninterface ISliderProps {\n    parent: any;\n    slideMove: number;\n    slideActive: number;\n    itemWidth: number;\n    gap: number;\n    swipe: boolean;\n    data: Array<ISlider>;\n}\n\n@Component({\n  selector: 'app-slider',\n  templateUrl: './slider.component.html',\n  styleUrls: ['./slider.component.scss']\n})\nexport class SliderComponent implements AfterViewInit, OnDestroy {\n    @ViewChild('carousel') public slider!: ElementRef;\n\n    public sliderData: Array<ISlider> = [\n        {\n            title: 'Slide 1',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 2',\n            suptitle: 'Lorem ipsum dolor sit.'\n        },\n        {\n            title: 'Slide 3',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 4',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 5',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 6',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 7',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        },\n        {\n            title: 'Slide 8',\n            suptitle: 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'\n        }\n    ];\n\n    public sliderProps!: ISliderProps;\n\n    private container: any;\n    private drag: { pressed: boolean; startPosition: number; newPosition: number } = {\n        pressed: false, startPosition: 0, newPosition: 0\n    };\n    private start!: (v: any) => void;\n    private move!: (v: any) => void;\n    private stop!: () => void;\n    public isNextDisabled = false;\n    public isPrevDisabled = true;\n    private itemsVisible!: number;\n\n    @HostListener('window:resize')\n    onResize() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.initSlider();\n        }\n    }\n\n    constructor(\n        @Inject(PLATFORM_ID) private platformId: any\n    ) { }\n\n    ngAfterViewInit(): void {\n        if (isPlatformBrowser(this.platformId)) {\n            this.initSlider();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._checkTouchDevice()) {\n            this.container?.removeEventListener('touchstart', this.start, false);\n            this.container?.removeEventListener('touchmove', this.move, false);\n        } else {\n\n            this.container?.removeEventListener('mousedown', this.start, false);\n            this.container?.removeEventListener('mousemove', this.move, false);\n            this.container?.removeEventListener('mouseleave', this.stop, false);\n            this.container?.removeEventListener('mouseup', this.stop, false);\n        }\n    }\n\n    public initSlider(): void {\n        this.sliderProps = {\n            parent: this.slider.nativeElement,\n            slideMove: 1,\n            slideActive: 0,\n            itemWidth: 320,\n            gap: 15,\n            swipe: true,\n            data: this.sliderData\n        };\n\n        this.container = this.sliderProps.parent.children[0];\n        this.container.style.columnGap = this.sliderProps.gap + 'px';\n        this.container.style.width =\n            (this.sliderProps.itemWidth * this.sliderData.length) +\n            (this.sliderProps.gap * (this.sliderData.length - 1)) + 'px';\n        this.container.children[this.sliderProps.slideActive].classList.add('active');\n        this.itemsVisible = Math.floor(this.sliderProps.parent.getBoundingClientRect().width / (this.sliderProps.itemWidth + this.sliderProps.gap));\n\n        if (this.sliderProps.swipe) {\n            this.dragging();\n        }\n    }\n\n    public dragging(): void {\n        this.drag = { pressed: false, startPosition: 0, newPosition: 0 }\n\n        this.start = (e) => {\n            this.drag.pressed = true;\n            this.drag.startPosition = (e.pageX || e.touches[0].clientX) - (this.container.getBoundingClientRect().left);\n            this.container.style.cursor = 'grabbing';\n        }\n\n        this.move = (e) => {\n            if (!this.drag.pressed) return;\n            e.preventDefault();\n\n            const currentX = (e.pageX || e.touches[0].clientX) < 0 ? 0 : (e.pageX || e.touches[0].clientX);\n            const dist = currentX - (this.sliderProps.parent.getBoundingClientRect().left);\n\n            this.drag.newPosition = dist - this.drag.startPosition;\n            this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n            this.container.style.transitionDuration = '0s';\n        }\n\n        this.stop = () => {\n            const parentRect = this.sliderProps.parent.getBoundingClientRect();\n            const containerRect = this.container.getBoundingClientRect();\n            const children = this.container.children;\n            children[this.sliderProps.slideActive].classList.remove('active');\n\n            if (containerRect.left > parentRect.left) {\n                this.sliderProps.slideActive = 0;\n            } else {\n                let currentSlide = Math.round(Math.abs(this.drag.newPosition) / this.sliderProps.itemWidth);\n\n                if (currentSlide + this.itemsVisible - 1 <= this.container.children.length - 1) {\n                    this.sliderProps.slideActive = currentSlide;\n                }\n            }\n\n            children[this.sliderProps.slideActive].classList.add('active');\n\n            this.drag.newPosition = -(this.sliderProps.slideActive * (this.sliderProps.itemWidth + this.sliderProps.gap));\n            this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n            this.container.style.cursor = 'grab';\n            this.container.style.transitionDuration = '.4s';\n            this.drag.pressed = false;\n            this.isPrevDisabled = this.sliderProps.slideActive === 0;\n            this.isNextDisabled = containerRect.width - Math.abs(this.drag.newPosition) + this.sliderProps.gap < parentRect.width;\n        }\n\n        if (this._checkTouchDevice()) {\n            // touch event\n            this.container.addEventListener('touchstart', this.start, false);\n            this.container.addEventListener('touchmove', this.move, false);\n            this.container.addEventListener('touchend', this.stop, false);\n        } else {\n            // mouse event\n            this.container.addEventListener('mousedown', this.start, false);\n            this.container.addEventListener('mousemove', this.move, false);\n            this.container.addEventListener('mouseleave', this.stop, false);\n            this.container.addEventListener('mouseup', this.stop, false);\n        }\n    }\n\n    public moveSlider(direction: string): void {\n        const parentRect = this.sliderProps.parent.getBoundingClientRect();\n        const containerRect = this.container.getBoundingClientRect();\n        const children = this.container.children;\n        children[this.sliderProps.slideActive].classList.remove('active');\n\n        if (direction === 'prev') {\n            if (this.drag.newPosition < 0) {\n                if (Math.round(this.drag.newPosition / (this.sliderProps.itemWidth + this.sliderProps.gap)) > -2) {\n                    this.sliderProps.slideActive = 0;\n                    this.drag.newPosition = 0;\n                } else {\n                    this.sliderProps.slideActive--;\n                    this.drag.newPosition = this.sliderProps.itemWidth + this.sliderProps.gap + this.drag.newPosition;\n                }\n            }\n            this.isNextDisabled = false;\n        } else if (direction === 'next') {\n            if (containerRect.right + this.sliderProps.gap > parentRect.right) {\n                this.sliderProps.slideActive++;\n                this.drag.newPosition = -(this.sliderProps.itemWidth + this.sliderProps.gap) + this.drag.newPosition;\n            }\n            this.isNextDisabled = (containerRect.right - this.sliderProps.itemWidth) < parentRect.right;\n        }\n\n        children[this.sliderProps.slideActive].classList.add('active');\n        this.container.style.transform = `translate3d(${this.drag.newPosition}px, 0px, 0px)`;\n        this.isPrevDisabled = this.sliderProps.slideActive === 0;\n    }\n\n    private _checkTouchDevice(): boolean {\n        return 'ontouchstart' in document.documentElement;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".carousel {\n  position: relative;\n  overflow: hidden;\n\n  &__nav {\n    padding: 24px;\n    text-align: right;\n\n    .mat-mdc-icon-button {\n      color: #fff;\n      background-color: var(--primaryAccent);\n\n      & + .mat-mdc-icon-button {\n        margin-left: 16px;\n      }\n\n      &[disabled] {\n        background-color: var(--disabledBackground);\n      }\n    }\n  }\n\n  &--inner {\n    display: flex;\n    transition: all 0s;\n    transition-duration: .4s;\n  }\n\n  &--item {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n\n    &.active {\n      .carousel__card {\n        color: #fff;\n        background-color: var(--color-menu-active);\n      }\n    }\n  }\n\n  &__card {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    width: 320px;\n    height: 340px;\n    padding: 40px 30px;\n    border-radius: 8px;\n    transition: .3s;\n    overflow: hidden;\n  }\n}\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"p-y-32\">\n\n  <section class=\"p-l-24\">\n    <div #carousel class=\"carousel\">\n      <div class=\"carousel--inner\">\n        <div\n          class=\"carousel--item\"\n          *ngFor=\"let card of sliderData; let i = index\">\n          <div class=\"carousel__card bg-primary\">\n            <div class=\"carousel__card--title mat-subtitle-1\" *ngIf=\"card.title\">\n              <b>{{card.title}}</b>\n            </div>\n            <div class=\"carousel__card--suptitle mat-body-2\" *ngIf=\"card.suptitle\">\n              {{card.suptitle}}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"carousel__nav\">\n      <button mat-icon-button [disabled]=\"isPrevDisabled\" (click)=\"moveSlider('prev')\">\n        <span class=\"material-symbols-outlined\">chevron_left</span>\n      </button>\n      <button mat-icon-button [disabled]=\"isNextDisabled\" (click)=\"moveSlider('next')\">\n        <span class=\"material-symbols-outlined\">chevron_right</span>\n      </button>\n    </div>\n  </section>\n\n</div>\n"
        },
        {
            "name": "SvgBarComponent",
            "id": "component-SvgBarComponent-6e5a6ece4783e6be842e984040215f15f90cfbe4e80be6de2c7fd0f3ebd97f3743aa9763fe85f7f5453b8e43c9a821304f0e5760fd00e1a2580e324e595d18c8",
            "file": "src/app/components/dashboard/bar-chart/svg-bar/svg-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg:g[svg-bar]",
            "styleUrls": [],
            "styles": [
                "rect {fill: #747878; transition: .3s} rect:hover {fill: blue}"
            ],
            "template": "<svg:rect\n    #bar\n    [attr.width]=\"item.width\"\n    [attr.height]=\"item.height\"\n    [attr.rx]=\"settings.radius ? settings.radius + 'px' : 0\"\n    [attr.ry]=\"settings.radius ? settings.radius + 'px' : 0\"\n    [attr.x]=\"item.x\"\n    [attr.y]=\"item.y\"\n    svgTooltip\n    [svgTooltipText]=\"item.tooltip\"\n    *ngFor=\"let item of data\" />\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Array<IDataBar>",
                    "decorators": []
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IBarSettings",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { IBarSettings, IDataBar } from '../bar-chart.component';\n\n@Component({\n    selector: 'svg:g[svg-bar]',\n    template: `\n    <svg:rect\n        #bar\n        [attr.width]=\"item.width\"\n        [attr.height]=\"item.height\"\n        [attr.rx]=\"settings.radius ? settings.radius + 'px' : 0\"\n        [attr.ry]=\"settings.radius ? settings.radius + 'px' : 0\"\n        [attr.x]=\"item.x\"\n        [attr.y]=\"item.y\"\n        svgTooltip\n        [svgTooltipText]=\"item.tooltip\"\n        *ngFor=\"let item of data\" />\n    `,\n    styles: [`rect {fill: #747878; transition: .3s} rect:hover {fill: blue}`]\n})\nexport class SvgBarComponent {\n    @Input() public settings!: IBarSettings;\n    @Input() public data!: Array<IDataBar>;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "rect {fill: #747878; transition: .3s} rect:hover {fill: blue}\n",
            "extends": []
        },
        {
            "name": "SvgGridAxisXComponent",
            "id": "component-SvgGridAxisXComponent-c9b566b1ffb8e4e43c0c6345bf4950adab024880d07d08f7fd2b3425002afe88337143b94a3e6254315d08431fdfc38e88d8285b77eef8c17c845b4836d23bc1",
            "file": "src/app/components/dashboard/bar-chart/svg-grid-axis-x/svg-grid-axis-x.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg:g[svg-grid-axis-x]",
            "styleUrls": [],
            "styles": [
                "\n        text {\n            font-family: 'CircularStd-Book';\n            font-size: 0.625rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 0.875rem;\n            letter-spacing: 1.5px;\n            fill: var(--primaryText);\n            text-transform: uppercase;\n        }\n    "
            ],
            "template": "<ng-container *ngFor=\"let item of data; let i = index\">\n    <svg:text\n        #text\n        fill=\"currentColor\"\n        [attr.y]=\"item.y\"\n        [attr.x]=\"item.x\"\n        [style.transform]=\"transform\"\n        *ngIf=\"i === 0 || (i + 1) % 5 === 0\">\n        {{item.label}}\n    </svg:text>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "Array<IDataAxisX>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'text'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "transform",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';\n\nimport { IDataAxisX } from '../bar-chart.component';\n\n@Component({\n    selector: 'svg:g[svg-grid-axis-x]',\n    template: `\n        <ng-container *ngFor=\"let item of data; let i = index\">\n            <svg:text\n                #text\n                fill=\"currentColor\"\n                [attr.y]=\"item.y\"\n                [attr.x]=\"item.x\"\n                [style.transform]=\"transform\"\n                *ngIf=\"i === 0 || (i + 1) % 5 === 0\">\n                {{item.label}}\n            </svg:text>\n        </ng-container>\n    `,\n    styles: [`\n        text {\n            font-family: 'CircularStd-Book';\n            font-size: 0.625rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 0.875rem;\n            letter-spacing: 1.5px;\n            fill: var(--primaryText);\n            text-transform: uppercase;\n        }\n    `]\n})\nexport class SvgGridAxisXComponent implements AfterViewInit {\n    @Input() public data!: Array<IDataAxisX>;\n    @ViewChild('text') public text!: ElementRef;\n\n    public transform = '';\n\n    constructor(private cdr: ChangeDetectorRef) {\n    }\n\n    ngAfterViewInit() {\n        this.transform = `translateX(-${this.text.nativeElement?.getBoundingClientRect().width / 2}px)`;\n        this.cdr.detectChanges();\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        text {\n            font-family: 'CircularStd-Book';\n            font-size: 0.625rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 0.875rem;\n            letter-spacing: 1.5px;\n            fill: var(--primaryText);\n            text-transform: uppercase;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "SvgGridAxisYComponent",
            "id": "component-SvgGridAxisYComponent-e4838b07829bc0e742aa3eeb38382f3d010b097837635ccc68105a616fc99cd2f218d1536e93756703f0f97b8f8d673bf9c9d6e92e7a38c60551e3922f56e98f",
            "file": "src/app/components/dashboard/bar-chart/svg-grid-axis-y/svg-grid-axis-y.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg:g[svg-grid-axis-y]",
            "styleUrls": [],
            "styles": [
                "\n        path {\n            stroke: var(--primaryText);\n            stroke-opacity: 0.16;\n        }\n\n        text {\n            font-family: 'CircularStd-Book';\n            font-size: 0.625rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 0.875rem;\n            letter-spacing: 1.5px;\n            fill: var(--primaryText);\n            text-transform: uppercase;\n            transform: translateY(3px);\n        }\n    "
            ],
            "template": "<ng-container *ngFor=\"let item of data\">\n    <svg:path\n        [attr.stroke-dasharray]=\"settings.borderStyle.type === 'dashed' ?\n                                settings.borderStyle.strokeWidth : '0'\"\n        [attr.d]=\"item.path\">\n    </svg:path>\n\n    <svg:text fill=\"currentColor\" x=\"0\" [attr.y]=\"item.label.dy\">{{item.label.value}}</svg:text>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "Array<IDataAxisY>",
                    "decorators": []
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "IAxisYSettings",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { IAxisYSettings, IDataAxisY } from '../bar-chart.component';\n\n@Component({\n    selector: 'svg:g[svg-grid-axis-y]',\n    template: `\n        <ng-container *ngFor=\"let item of data\">\n            <svg:path\n                [attr.stroke-dasharray]=\"settings.borderStyle.type === 'dashed' ?\n                                        settings.borderStyle.strokeWidth : '0'\"\n                [attr.d]=\"item.path\">\n            </svg:path>\n\n            <svg:text fill=\"currentColor\" x=\"0\" [attr.y]=\"item.label.dy\">{{item.label.value}}</svg:text>\n        </ng-container>\n    `,\n    styles: [`\n        path {\n            stroke: var(--primaryText);\n            stroke-opacity: 0.16;\n        }\n\n        text {\n            font-family: 'CircularStd-Book';\n            font-size: 0.625rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 0.875rem;\n            letter-spacing: 1.5px;\n            fill: var(--primaryText);\n            text-transform: uppercase;\n            transform: translateY(3px);\n        }\n    `]\n})\nexport class SvgGridAxisYComponent {\n    @Input() public settings!: IAxisYSettings;\n    @Input() public data!: Array<IDataAxisY>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        path {\n            stroke: var(--primaryText);\n            stroke-opacity: 0.16;\n        }\n\n        text {\n            font-family: 'CircularStd-Book';\n            font-size: 0.625rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 0.875rem;\n            letter-spacing: 1.5px;\n            fill: var(--primaryText);\n            text-transform: uppercase;\n            transform: translateY(3px);\n        }\n    \n",
            "extends": []
        },
        {
            "name": "SvgIconsComponent",
            "id": "component-SvgIconsComponent-858b2def2c9069e49c678a9676541aa5df012c3cab74e5b89510eb52b5f0cfeb724ef6eb4d95936585cca9b02720495e5d4636c4147cbc9c2b4301e01048bcee",
            "file": "src/app/common/sidenav/svg-icons/svg-icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-svg-icons",
            "styleUrls": [],
            "styles": [
                "\n        .flex-wrap {\n            row-gap: 16px;\n            column-gap: 16px;\n        }\n    "
            ],
            "templateUrl": [
                "./svg-icons.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n    selector: 'app-svg-icons',\n    templateUrl: './svg-icons.component.html',\n    styles: [`\n        .flex-wrap {\n            row-gap: 16px;\n            column-gap: 16px;\n        }\n    `]\n})\nexport class SvgIconsComponent {\n\n    constructor(\n        iconRegistry: MatIconRegistry,\n        sanitizer: DomSanitizer\n    ) {\n        iconRegistry.addSvgIconSet(sanitizer.bypassSecurityTrustResourceUrl('./assets/images/icons/set.svg'))\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        .flex-wrap {\n            row-gap: 16px;\n            column-gap: 16px;\n        }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"p-x-24 p-y-32\">\n  <h2 class=\"mat-subtitle-1\">Icons/Action</h2>\n\n  <mat-card class=\"p-x-24 p-y-24 m-b-24\">\n    <div class=\"flex-wrap\">\n      <mat-icon class=\"size-24\" svgIcon=\"check-circle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"action-menu\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"menu\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"apps-add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"apps-delete\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"apps-sort\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"apps\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"more-horizontal\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"more-vertical\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ban\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bell-ring\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bell\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"dollar\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"download\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"trash\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"calculator\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"calendar\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cursor\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"earnings\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"euro\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"exclamation\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"eye-crossed\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"eye\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"filter\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"following\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"hastag\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"heart-arrow\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"heart\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"minus-circle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"user-add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"user-delete\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"user-remove\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"user-time\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"user\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"hourglass-end\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"hourglass\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"incognito\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"infinity\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"info\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"interrogation\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"link\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"lock-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"lock\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"navigation\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"paper-planer\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pharmacy\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"recycle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"rotate-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"settings\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"share\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"spinner-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"thumbs-down\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"thumbs-up\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"transform\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"link-autoservicio\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"move\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"nfc\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"unlock\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"upload\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"zoom-in\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"zoom-out\"></mat-icon>\n    </div>\n  </mat-card>\n\n  <h2 class=\"mat-subtitle-1\">Icons/Image</h2>\n\n  <mat-card class=\"p-x-24 p-y-24 m-b-24\">\n    <div class=\"flex-wrap\">\n      <mat-icon class=\"size-24\" svgIcon=\"camera\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"compress-arrow\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"compress\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"dropper\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"expand\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-ai\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-eps\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-gif\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-jpg\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-psd\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"fill\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"film\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"flip-horizontal\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"gallery\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"magic-wand\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mode-landscape\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mode-portrait\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"opacity\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"paint-brush\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"palette\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"picture\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"portrait\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"reflect\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"resize\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"resources\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"stapler\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"star-octogram\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"star\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"vector\"></mat-icon>\n    </div>\n  </mat-card>\n\n  <h2 class=\"mat-subtitle-1\">Icons/Editor</h2>\n\n  <mat-card class=\"p-x-24 p-y-24 m-b-24\">\n    <div class=\"flex-wrap\">\n      <mat-icon class=\"size-24\" svgIcon=\"align-center\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"align-justify\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"align-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"align-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"asterik\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bold\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"book-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"book\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bookmark\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chart-connected\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chart-histogram\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chart-network\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chart-pie\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chart-set-theory\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chart-tree\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chat-arrow-down\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chat-arrow-grow\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"clip\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pie-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"text-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"copy-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"copy\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"copyright\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cursor-text\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"delete\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"disk\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"doctor\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"document-signed\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"document\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"duplicate\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"edit-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"edit\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-delete\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file-music\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"file\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"folder-add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"text-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"text\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"document-detail\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"folder\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"form\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"grid-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"grid\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"inbox\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"indent\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"interlining\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"italic\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"lasso\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"layers\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"letter-case\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"line-width\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"list-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"list-number\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"list\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mobile-edit\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"notebook\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pencil\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pound\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"protractor\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"quote-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"receipt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"search-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"search-heart\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"search\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"settings-sliders\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"square-root\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"stats\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"test\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"thumbtack\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tool-crop\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tool-marquee\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"underline\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"vector-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"yen\"></mat-icon>\n    </div>\n  </mat-card>\n\n  <h2 class=\"mat-subtitle-1\">Image/Navigation</h2>\n\n  <mat-card class=\"p-x-24 p-y-24 m-b-24\">\n    <div class=\"flex-wrap\">\n      <mat-icon class=\"size-24\" svgIcon=\"angle-double-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-double-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-double-small-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-double-small-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-down\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-up\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-small-down\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-small-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-small-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"angle-small-up\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-diagonal\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-down\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-from-bottom\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-small-down\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-small-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-small-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-small-up\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-swap\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"arrow-up\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"caret-down\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"caret-left\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"caret-right\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"caret-up\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"check-circle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"checkbox\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cross-circle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cross-small\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cross\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"minus-small\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"minus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"more-circle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"plus-small\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"plus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"quantity-selection\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"redo-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"redo\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"refresh\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sign-in-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sign-in\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sign-out-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sign-out\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"undo-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"undo\"></mat-icon>\n    </div>\n  </mat-card>\n\n  <h2 class=\"mat-subtitle-1\">Icons/Comunication</h2>\n\n  <mat-card class=\"p-x-24 p-y-24 m-b-24\">\n    <div class=\"flex-wrap\">\n      <mat-icon class=\"size-24\" svgIcon=\"call-history\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"call-incoming\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"call-missed\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"call-outgoing\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"phone-call\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"phone-cross\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"phone-pause\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"phone-slash\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"address-book\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"at\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cloud-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cloud-disabled\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cloud-download\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cloud-share\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cloud-upload\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cloud\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"comments\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pause\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"wifi-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"comment-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"comment-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"comment-heart\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"comment-info\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"comment-user\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"comment\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"envelope-ban\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"envelope-download\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"envelope-marker\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"envelope-open\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"envelope-plus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"envelope\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"forward\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ftp\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"headphones\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"headset\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"learning\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"location-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"network-cloud\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"network\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"play-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"play\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"record-vinyl\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"rewind\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"signal-alt-1\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"signal-alt-2\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"signal-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"target\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"volume\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"wifi-disabled\"></mat-icon>\n    </div>\n  </mat-card>\n\n  <h2 class=\"mat-subtitle-1\">image/Device</h2>\n\n  <mat-card class=\"p-x-24 p-y-24 m-b-24\">\n    <div class=\"flex-wrap\">\n      <mat-icon class=\"size-24\" svgIcon=\"alarm-clock\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"browser\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bug\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"clock\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"computer\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cube\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cursor-finger\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cursor-plus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"dart\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"dashboard\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"data-transfer\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"database\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"diamond\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"graphic-tablet\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"home-location-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"home-location\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"home\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"interactive\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"keyboard\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"laptop\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"map-marker-cross\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"map-marker-home\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"map-marker-minus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"map-marker-plus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"map-marker\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"map\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"marker-time\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"marker\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"microphone-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"microphone\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mouse\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"plane\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"power\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"presentation\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"print\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pulse\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"screen\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"smartphone\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"speaker\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"stopwatch\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"subtitles\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tablet\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-delete\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-fast\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-forward-sixty\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-forward-ten\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-forward\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-half-past\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-oclock\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-past\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-quarter-past\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-quarter-to\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"time-twenty-four\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"treatment\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"usb-pendrive\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"video-camera\"></mat-icon>\n    </div>\n  </mat-card>\n\n  <h2 class=\"mat-subtitle-1\">Image/Places</h2>\n\n  <mat-card class=\"p-x-24 p-y-24 m-b-24\">\n    <div class=\"flex-wrap\">\n      <mat-icon class=\"size-24\" svgIcon=\"ambulance\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"backpack\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ballons\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bank\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"barber-shop\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"baseball\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"basketball\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bed\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"beer\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bell-shool\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bike\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bowling\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"box-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"car\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"school-bus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ship-side\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ship\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"taxi\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"train-side\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"truck-side\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"archive\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"box\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"building\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cake-birthday\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cake-wedding\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"camping\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"carrot\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cheese\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chess-piece\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cocktail\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"coffee\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cookie\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cow\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"crown\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cupcake\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"disco-ball\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"drink-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"drumstick\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ferris-wheel\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"wheelchair\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"apple\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"band-aid\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"billiard\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bread-slice\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"briefcase\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"broom\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"bulb\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"butterfly\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"chart-pyramid\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"child-head\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"cream\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"credit-card-debito\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"croissant\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"dice\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"diploma\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"feather\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"fingerprint\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"fish\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"flag\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"flame\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"flower-bouquet\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"flower-tulip\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"flower\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"football\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"fox\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"frown\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"gamepad\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"gas-pump\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"gem\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"gift\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"glass-cheers\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"glasses\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"globe-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"globe\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"golf\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"graduation-cap\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"guitar\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"gym\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"hamburger\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"hand-holding-heart\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"hat-birthday\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"head-side-thinking\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ice-cream\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ice-skate\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"id-badge\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"key\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"kite\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"label\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"laugh\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"layout-fluid\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"leaf\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"life-ring\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"lipstick\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"luggage-rolling\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"makeup-brush\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"man-head\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mars-double\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mars\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mask-carnival\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"medicine\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"megaphone\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"meh\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"money\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"moon\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mountains\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mug-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"music-alt\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"music\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"package\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"password\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"paw\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"physics\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ping-pong\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pizza-slice\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"playing-cards\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"poker-chip\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"pyramid\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"rainbow\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"raindrops\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"rhombus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"rings-wedding\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"road\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"rocket\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"room-service\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"rugby\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sad\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"salad\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"scale\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"school\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"scissors\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shield-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shield-exclamation\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shield-interrogation\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shield-plus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shield\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shop\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shopping-bag-add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shopping-bag\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shopping-cart-add\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shopping-cart-check\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"apio\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"camaron\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"counter\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"credit-card\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"delivery\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"facebook\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"four-coins\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"frutos-secos\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"huevos\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"instagram\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"mani\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"one-coin\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"qr\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"restaurant\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shell\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shopping-cart\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"shuffle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"skateboard\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"smile-wink\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"smile\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"snowflake\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"soap\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"soup\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"spa\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sphere\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"stethoscope\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sticker\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sun\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sunrise\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"surfing\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"sword\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"syringe\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"table\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"team\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tennis\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"terrace\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"test-tube\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"thermometer-half\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"three-coins\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"ticket\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tooth\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tornado\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"train\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"transferencia\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tree-chistmas\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tree\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"triangle\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"trophy\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tuu-sad\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"tuu\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"two-coins\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"umbrella\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"utensils\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"venus-double\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"venus-mars\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"venus\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"volleyball\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"wallet\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"whatsapp\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"wind\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"woman-head\"></mat-icon>\n      <mat-icon class=\"size-24\" svgIcon=\"world\"></mat-icon>\n    </div>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "SvgTooltipComponent",
            "id": "component-SvgTooltipComponent-532bd576214d785a7b85793a68c9796ba9699d8214d70f7c1d1341e91848a07673599659c2cff6e9586ac3ab33b9fd1522dffdb496a9f042dbcd52fb13ac2077",
            "file": "src/app/components/dashboard/bar-chart/svg-tooltip/svg-tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg-tooltip",
            "styleUrls": [],
            "styles": [
                "\n        :host {\n            display: block;\n            position: fixed;\n            z-index: 100;\n            transition: .3s;\n            transform: scale(0) translate(-50%, -100%);\n        }\n\n        .svgTooltip {\n            display: inline-flex;\n            justify-content: center;\n            align-items: center;\n            font-family: 'CircularStd-Book';\n            font-size: .75rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 1rem;\n            letter-spacing: 0.5px;\n            color: var(--color-menu-active);\n            padding: 8px 12px;\n            margin-bottom: 10px;\n            border-radius: 40px;\n            border: 1px solid var(--color-menu-active);\n            background: var(--surface);\n        }\n    "
            ],
            "template": "<div class=\"svgTooltip\">{{text}}</div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style'"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n    selector: 'svg-tooltip',\n    template: `<div class=\"svgTooltip\">{{text}}</div>`,\n    styles: [`\n        :host {\n            display: block;\n            position: fixed;\n            z-index: 100;\n            transition: .3s;\n            transform: scale(0) translate(-50%, -100%);\n        }\n\n        .svgTooltip {\n            display: inline-flex;\n            justify-content: center;\n            align-items: center;\n            font-family: 'CircularStd-Book';\n            font-size: .75rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 1rem;\n            letter-spacing: 0.5px;\n            color: var(--color-menu-active);\n            padding: 8px 12px;\n            margin-bottom: 10px;\n            border-radius: 40px;\n            border: 1px solid var(--color-menu-active);\n            background: var(--surface);\n        }\n    `]\n})\nexport class SvgTooltipComponent {\n    @HostBinding('style') public style!: any;\n    @Input() public text!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        :host {\n            display: block;\n            position: fixed;\n            z-index: 100;\n            transition: .3s;\n            transform: scale(0) translate(-50%, -100%);\n        }\n\n        .svgTooltip {\n            display: inline-flex;\n            justify-content: center;\n            align-items: center;\n            font-family: 'CircularStd-Book';\n            font-size: .75rem;\n            font-style: normal;\n            font-weight: 500;\n            line-height: 1rem;\n            letter-spacing: 0.5px;\n            color: var(--color-menu-active);\n            padding: 8px 12px;\n            margin-bottom: 10px;\n            border-radius: 40px;\n            border: 1px solid var(--color-menu-active);\n            background: var(--surface);\n        }\n    \n",
            "extends": []
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-b4ba9f0de4f1afdfe9e40a6d0fdb2a1182f3e8d8fd42f8ac2e397475ccfdd91892593328a21b5155826aeddaea494816372b4058f8d2a43d09ce5c4c7bfc80c4",
            "file": "src/app/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tooltip",
            "styleUrls": [],
            "styles": [
                "\n        :host {\n            display: block;\n            position: fixed;\n            max-width: 280px;\n            padding: 8px;\n            border-radius: 4px;\n            background-color: var(--surface);\n            box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, .2),\n                0px 2px 2px 0px rgba(0, 0, 0, .14),\n                0px 1px 5px 0px rgba(0, 0, 0, .12);\n            transform: scale(0);\n            transform-origin: center center;\n            z-index: 101;\n        }\n    "
            ],
            "template": "<ng-content #content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classes",
                    "defaultValue": "'tooltip mat-body-2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'tooltip mat-body-2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding } from '@angular/core';\n\n@Component({\n    selector: 'app-tooltip',\n    template: `\n        <ng-content #content></ng-content>\n    `,\n    styles: [`\n        :host {\n            display: block;\n            position: fixed;\n            max-width: 280px;\n            padding: 8px;\n            border-radius: 4px;\n            background-color: var(--surface);\n            box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, .2),\n                0px 2px 2px 0px rgba(0, 0, 0, .14),\n                0px 1px 5px 0px rgba(0, 0, 0, .12);\n            transform: scale(0);\n            transform-origin: center center;\n            z-index: 101;\n        }\n    `],\n})\nexport class TooltipComponent {\n    @HostBinding('class') classes = 'tooltip mat-body-2';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n        :host {\n            display: block;\n            position: fixed;\n            max-width: 280px;\n            padding: 8px;\n            border-radius: 4px;\n            background-color: var(--surface);\n            box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, .2),\n                0px 2px 2px 0px rgba(0, 0, 0, .14),\n                0px 1px 5px 0px rgba(0, 0, 0, .12);\n            transform: scale(0);\n            transform-origin: center center;\n            z-index: 101;\n        }\n    \n",
            "extends": []
        },
        {
            "name": "TypographyComponent",
            "id": "component-TypographyComponent-123b87aacb3e30970973a33fa5cd3aa99383dbbd143c122585303906c4546e8ea3dd857aecb9bac6e28c9f8337c662b879221b130bfcec842f1d0e00a31ccf37",
            "file": "src/app/common/typography/typography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-typography",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./typography.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-typography',\n    templateUrl: './typography.component.html'\n})\nexport class TypographyComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"p-x-24 p-y-32\">\n  <div class=\"mat-h1 m-l-10\"><b>Title 1 (.mat-h1)</b></div>\n  <div class=\"mat-headline-5\"><b>Headline-5 (.mat-headline-5)</b></div>\n  <br>\n  <br>\n  <div class=\"mat-h2\"><b>Title 2 (.mat-h2)</b></div>\n  <div class=\"mat-headline-6\"><b>Headline-6 (.mat-headline-6)</b></div>\n  <br>\n  <br>\n  <div class=\"mat-h3\"><b>Title 3 (.mat-h3)</b></div>\n  <div class=\"mat-subtitle-1\"><b>Subtitle-1 (.mat-subtitle-1)</b></div>\n  <br>\n  <br>\n  <div class=\"mat-h4\">Title 4 (.mat-h4)</div>\n  <div class=\"mat-body-1\">Body-1 (.mat-body-1)</div>\n  <br>\n  <br>\n  <div class=\"mat-body\">Body (.mat-body)</div>\n  <div class=\"mat-body-2\">Body-2 (.mat-body-2)</div>\n  <br>\n  <br>\n  <div class=\"mat-caption\">Caption (.mat-caption)</div>\n  <div class=\"mat-small\">Small (.mat-small)</div>\n  <br>\n  <br>\n  <p>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Accusantium, repellat? Molestias necessitatibus quos atque earum quae nesciunt voluptatibus nemo impedit ipsam harum dignissimos dolorum veritatis similique quam ea nisi, possimus reprehenderit.\n  </p>\n  <br>\n  <br>\n\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Teléfono</mat-label>\n    <input matInput value=\"text\">\n    <mat-hint class=\"color-warn\">Hint</mat-hint>\n  </mat-form-field>\n\n  <mat-form-field class=\"m-l-16\" appearance=\"outline\" color=\"accent\">\n    <mat-label>Teléfono</mat-label>\n    <input matInput value=\"text\">\n    <mat-hint class=\"color-warn\">Hint</mat-hint>\n  </mat-form-field>\n\n  <br>\n  <br>\n\n  <button mat-flat-button>Basic button</button>\n  <button mat-flat-button color=\"primary\" class=\"m-l-16\">Primary button</button>\n  <button mat-flat-button color=\"accent\" class=\"m-l-16\">Accent button</button>\n  <button mat-flat-button color=\"warn\" class=\"m-l-16\">Warn button</button>\n</div>\n"
        },
        {
            "name": "WebHeaderComponent",
            "id": "component-WebHeaderComponent-de20c258f38503dfef25a747d41f598e4f6d2ccdabbfed972efe55223649ca9af572af8e5548b842a7c366f8efc612b651327f6f330989a763256b5a4ac040a6",
            "file": "src/app/common/web-header/web-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-web-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./web-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-web-header',\n    templateUrl: './web-header.component.html'\n})\nexport class WebHeaderComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-header></app-header>\n\n<div class=\"content p-x-16\">\n  <p>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Ullam illo ipsum, voluptatum, aliquid a perspiciatis cumque natus enim vitae debitis esse dolor omnis placeat ratione minus voluptatibus dolorem fugit asperiores nisi doloremque commodi autem necessitatibus. Corrupti, nesciunt consequatur placeat debitis veritatis perferendis repellendus sint dolore vero commodi ea earum quas veniam dolor fugit, dolores obcaecati molestias? Quo tempora debitis aspernatur nesciunt fuga magnam error illum, explicabo expedita corrupti cumque, esse eligendi omnis enim earum nisi nam excepturi quidem. Eos autem adipisci numquam tempora esse nulla totam vel tenetur voluptatem vitae culpa sequi ullam dolor debitis magnam, repellendus iure hic illo facere nihil. Voluptatum similique ipsam officia pariatur quam obcaecati enim nesciunt rem inventore. Repellendus non libero aliquid quas, doloremque est nesciunt quos quidem adipisci laboriosam. Inventore tempora modi ad nemo veniam? Quaerat tenetur ipsum quam delectus, natus, architecto sapiente autem voluptate aut aperiam, asperiores consequatur. Vero officiis soluta non delectus aperiam quod magnam. Quo, nesciunt quasi voluptatibus aliquam veniam maiores fugiat! Neque molestiae magni eius doloribus quod enim doloremque ut, molestias illo esse voluptatibus culpa numquam rerum id officia fugiat iste vero reiciendis at! Quidem accusantium fuga enim cupiditate in dolores nobis. Unde dolores omnis eligendi porro velit? Magnam, labore ducimus quod eum aliquid cupiditate animi necessitatibus reprehenderit, sit tempore accusamus illo dicta! Eligendi eveniet optio dignissimos praesentium veniam unde quidem recusandae quam nihil ut, porro eaque similique! Perspiciatis ad porro aliquid cumque dolorum, incidunt vitae exercitationem corporis rem tempora, voluptate eos nemo eveniet neque id nostrum iusto, atque eius. Reiciendis recusandae excepturi quibusdam! Laudantium culpa dolorem veniam exercitationem voluptas aspernatur, consequuntur explicabo quo, cumque repellat magnam doloribus ad fugit facilis inventore molestias quis quisquam asperiores vero rerum earum illo? Quidem omnis consequatur fugiat incidunt dolorem minima et quos aspernatur libero odio velit, tempore corrupti officiis facilis illo? Vero, quo labore, perspiciatis distinctio reprehenderit repudiandae qui harum dolore doloribus minima a eaque eum error nobis natus odit magnam repellat? Assumenda soluta placeat iure cupiditate illo aliquam, obcaecati consectetur natus autem aut, eaque rerum explicabo, optio consequuntur harum. Eos ad eum ullam, ut facilis mollitia. Dolor, natus in quidem vero odio nostrum ipsa quod earum, eius quaerat animi repellendus voluptatum voluptate officia doloribus saepe repudiandae! Inventore fugit ullam obcaecati accusantium quaerat omnis, ipsa officia explicabo illo minima facere laudantium adipisci et. Reprehenderit, dolore necessitatibus maxime quis sunt tempora culpa vitae amet fugiat laborum consequuntur nostrum. Qui molestias perspiciatis ducimus porro adipisci voluptatum ipsam quis esse facere sunt, ad laudantium iusto velit dicta possimus quisquam dolore aperiam odio labore animi, aliquid officia assumenda accusantium! Commodi voluptates hic incidunt omnis illum deserunt dolore sit dolorem assumenda cum inventore nobis molestias vitae similique natus aliquam nam esse, neque minima eius at quibusdam! Distinctio, praesentium dolorum. Qui, harum optio! Iusto, eum aperiam cupiditate tenetur nihil explicabo nulla consequuntur praesentium ipsam rem earum labore voluptatibus vitae suscipit rerum quibusdam voluptate. Earum iure nam unde ullam nesciunt odio voluptate iste molestiae temporibus porro fugiat rerum id corporis illo, at non quam inventore consequuntur facilis quidem repellat consequatur? Reiciendis vel alias quaerat, illum quasi, sequi at incidunt velit quo, eaque neque magni. Voluptatibus sapiente, laudantium illum possimus delectus maxime suscipit hic, modi, nesciunt corporis perferendis. Quis, ipsam et aperiam sapiente totam esse tempore quibusdam consectetur placeat omnis deleniti saepe eligendi ut vero necessitatibus consequuntur quos repellat fugit facilis repudiandae nostrum? Ad maiores, nulla exercitationem atque, error commodi natus enim similique, aliquid modi esse ipsam veritatis voluptatibus praesentium! Recusandae sit ex excepturi consequuntur sunt accusamus, iste soluta in quae amet cum sequi temporibus, eos suscipit laudantium, velit consectetur modi at praesentium error libero et deserunt veritatis? Porro omnis neque quod eveniet aliquam fugiat est vel optio nesciunt laudantium reprehenderit doloribus non sit ut, totam ipsum aperiam officia sequi perspiciatis quaerat tempora accusamus labore! Inventore harum ab tenetur. Voluptates similique ducimus nobis laudantium, voluptas nam harum ad numquam, ab quidem reiciendis ipsa officiis sint, et fugit necessitatibus debitis nisi eligendi. Reiciendis reprehenderit dolor nobis? Exercitationem, dolore incidunt nihil molestias, eos impedit repellendus distinctio accusantium veniam nesciunt amet ipsa. Quisquam ducimus ea ipsa ullam iure, ratione maxime commodi! Dicta dolorum unde iusto ab neque alias optio, placeat laborum vel maxime nisi libero saepe velit? Ad id incidunt corrupti repellat rerum. Molestias labore unde quibusdam alias repellendus beatae laborum exercitationem, sunt placeat sint quia debitis soluta provident quos cum id sapiente facilis odit vero. Id recusandae aliquam aspernatur debitis iusto porro ipsam doloremque sint iste corrupti, dolor exercitationem dolorem. Deserunt veritatis quis odio dolorum odit reprehenderit repellat nostrum in quaerat sapiente eos corporis, expedita unde illum libero a accusamus minima ratione. Nesciunt consequuntur facilis repellat est, cupiditate officiis ut ullam incidunt corporis inventore excepturi quidem blanditiis cumque voluptatem aut nostrum nihil, nisi sed quam, harum iure eligendi totam. Vitae, ex eligendi animi, necessitatibus nesciunt sint aliquid autem modi ut ratione, quis placeat ipsam aut explicabo totam beatae doloremque atque? Laborum obcaecati officiis, omnis aperiam eaque veniam commodi repudiandae quis aut natus recusandae dignissimos provident at voluptatibus dolor perspiciatis eius facilis minus? Praesentium, delectus sint porro reprehenderit laborum culpa in maiores fugit dolorem sunt ea itaque incidunt, deserunt consequatur architecto quisquam ullam molestiae nulla, vero iste? Repellat molestias aperiam suscipit libero, ut nihil cum illum facilis quae recusandae fugit maiores! Eius esse quae, minima ipsum error a accusantium aliquid aut soluta in modi nesciunt, maiores ex quos reiciendis minus porro id temporibus velit! Soluta aliquam, magnam suscipit eos deleniti voluptates voluptatem consectetur modi nihil culpa, pariatur earum doloremque quasi animi vitae consequatur, beatae magni in ipsam? Dolorem cum, magnam voluptatem qui minus nulla iste quibusdam, perferendis voluptate omnis temporibus necessitatibus quae, ducimus excepturi eum ex. Molestiae modi atque voluptatem? Voluptate in rem iusto molestiae distinctio nihil quod at aliquam. Magni molestias voluptatibus repellat qui laudantium dolores tempora earum culpa? Libero necessitatibus ducimus tenetur eius facere eum repudiandae maxime distinctio! Totam, magnam. Maxime minus quae accusamus cumque quos quisquam repudiandae sint corporis nostrum tempore. Cupiditate ex minima excepturi eaque? Veritatis eius, dolores rerum, dolor perspiciatis, aspernatur qui quisquam optio praesentium sapiente ipsam in ab.\n  </p>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-3eedb2a10945599f063645029c258649703fb70b1bb8a9fb31bbaafd03487871ff29ff326333b58b1f4a178eea72f487df2854871fbbcfdef0f0cd6062cf3eb4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { TranslocoRootModule } from './transoloco-root.module';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { CustomMaterialModule } from './common/material.module';\n\nimport { SidenavComponent } from './common/sidenav/sidenav.component';\nimport { TypographyComponent } from './common/typography/typography.component';\nimport { ColorHelpersComponent } from './common/color-helpers/color-helpers.component';\nimport { WebHeaderComponent } from './common/web-header/web-header.component';\nimport { HeaderComponent } from './common/web-header/header/header.component';\nimport { DropdownMenuComponent } from './common/web-header/header/dropdown-menu/dropdown-menu.component';\n\nimport { ComponentsComponent } from './components/components.component';\n\n// components\nimport { InfoBannerComponent } from './components/info-banner/info-banner.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { CustomSelectComponent } from './components/dashboard/custom-select/custom-select.component';\nimport { BarChartComponent } from './components/dashboard/bar-chart/bar-chart.component';\nimport { SvgBarComponent } from './components/dashboard/bar-chart/svg-bar/svg-bar.component';\nimport { SvgGridAxisYComponent } from './components/dashboard/bar-chart/svg-grid-axis-y/svg-grid-axis-y.component';\nimport { SvgGridAxisXComponent } from './components/dashboard/bar-chart/svg-grid-axis-x/svg-grid-axis-x.component';\nimport { SvgTooltipComponent } from './components/dashboard/bar-chart/svg-tooltip/svg-tooltip.component';\nimport { TooltipComponent } from './components/tooltip/tooltip.component';\nimport { SvgIconsComponent } from './common/sidenav/svg-icons/svg-icons.component';\nimport { PhoneFieldComponent } from './components/form/phone-field/phone-field.component';\nimport { PhoneFieldMenuSuffixComponent } from './components/form/phone-field-menu-suffix/phone-field-menu-suffix.component';\nimport { PhoneFieldMenuPrefixComponent } from './components/form/phone-field-menu-prefix/phone-field-menu-prefix.component';\nimport { SliderComponent } from './common/slider/slider.component';\n\n// services\nimport { ThemeService } from './common/services/theme.services';\nimport { DropdownService } from './common/services/dropdown.service';\n\n// directives\nimport { SvgTooltipDirective } from './components/dashboard/bar-chart/svg-tooltip.directive';\nimport { TooltipDirective } from './common/directives/tooltip.directive';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        SidenavComponent,\n        TypographyComponent,\n        ColorHelpersComponent,\n        ComponentsComponent,\n        InfoBannerComponent,\n        WebHeaderComponent,\n        HeaderComponent,\n        DropdownMenuComponent,\n        DashboardComponent,\n        CustomSelectComponent,\n        BarChartComponent,\n        SvgBarComponent,\n        SvgGridAxisYComponent,\n        SvgGridAxisXComponent,\n        SvgTooltipComponent,\n        TooltipComponent,\n        SvgIconsComponent,\n        PhoneFieldComponent,\n        PhoneFieldMenuSuffixComponent,\n        PhoneFieldMenuPrefixComponent,\n        SliderComponent,\n        // directives\n        SvgTooltipDirective,\n        TooltipDirective,\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        CustomMaterialModule,\n        HttpClientModule,\n        TranslocoRootModule\n    ],\n    providers: [\n        ThemeService,\n        DropdownService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DropdownService"
                        },
                        {
                            "name": "ThemeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BarChartComponent"
                        },
                        {
                            "name": "ColorHelpersComponent"
                        },
                        {
                            "name": "ComponentsComponent"
                        },
                        {
                            "name": "CustomSelectComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "DropdownMenuComponent"
                        },
                        {
                            "name": "InfoBannerComponent"
                        },
                        {
                            "name": "PhoneFieldComponent"
                        },
                        {
                            "name": "PhoneFieldMenuPrefixComponent"
                        },
                        {
                            "name": "PhoneFieldMenuSuffixComponent"
                        },
                        {
                            "name": "SidenavComponent"
                        },
                        {
                            "name": "SliderComponent"
                        },
                        {
                            "name": "SvgBarComponent"
                        },
                        {
                            "name": "SvgGridAxisXComponent"
                        },
                        {
                            "name": "SvgGridAxisYComponent"
                        },
                        {
                            "name": "SvgIconsComponent"
                        },
                        {
                            "name": "SvgTooltipComponent"
                        },
                        {
                            "name": "SvgTooltipDirective"
                        },
                        {
                            "name": "TooltipComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "TypographyComponent"
                        },
                        {
                            "name": "WebHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CustomMaterialModule"
                        },
                        {
                            "name": "TranslocoRootModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-bec93079ae19f655174b17f3cbe451e635722b3df923e3d290e3540e944d88af81be954ff06a7fda5c964905479b9dd75e5ed36e7bc6a1755063b27278db769e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { TypographyComponent } from './common/typography/typography.component';\nimport { ColorHelpersComponent } from './common/color-helpers/color-helpers.component';\nimport { WebHeaderComponent } from './common/web-header/web-header.component';\nimport { ComponentsComponent } from './components/components.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { SvgIconsComponent } from './common/sidenav/svg-icons/svg-icons.component';\nimport { SliderComponent } from './common/slider/slider.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: TypographyComponent,\n        pathMatch: 'full'\n    },\n    {\n        path: 'typography',\n        component: TypographyComponent\n    },\n    {\n        path: 'colors-scheme',\n        component: ColorHelpersComponent\n    },\n    {\n        path: 'components',\n        component: ComponentsComponent\n    },\n    {\n        path: 'web-header',\n        component: WebHeaderComponent\n    },\n    {\n        path: 'dashboard',\n        component: DashboardComponent\n    },\n    {\n        path: 'icons',\n        component: SvgIconsComponent\n    },\n    {\n        path: 'slider',\n        component: SliderComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomMaterialModule",
            "id": "module-CustomMaterialModule-86c0705345f3d5271b77eb234c6a1a4b800b40c8aeaf87608b1adc0bc825988c40f5df283aad6a069be6f3312e89910e8a9bd099b42e1a4eaffbe9698f166bd6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/common/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n@NgModule({\r\n    imports: [\r\n        FormsModule,\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatSidenavModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatListModule,\r\n        MatSlideToggleModule,\r\n        MatExpansionModule,\r\n        MatMenuModule,\r\n        MatCardModule\r\n    ],\r\n    exports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatSidenavModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatListModule,\r\n        MatSlideToggleModule,\r\n        MatExpansionModule,\r\n        MatMenuModule,\r\n        MatCardModule\r\n    ]\r\n})\r\nexport class CustomMaterialModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslocoRootModule",
            "id": "module-TranslocoRootModule-5d09564e169ea5e95420b371c74d0b2739fb0979e6fd46eb1231ee1d4f74137bb41aa5e2c34f6f3b726f88c377f9aaae88ceb914320913c90c7fec54d3527219",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/transoloco-root.module.ts",
            "methods": [],
            "sourceCode": "import {\n    provideTransloco,\n    TranslocoModule\n} from '@jsverse/transloco';\nimport { NgModule } from '@angular/core';\n\nimport { TranslocoHttpLoader } from './transloco-loader';\nimport { provideTranslocoMessageformat } from '@jsverse/transloco-messageformat';\nimport { provideTranslocoLocale, TranslocoLocaleModule } from '@jsverse/transloco-locale';\nimport { provideTranslocoPersistLang } from '@jsverse/transloco-persist-lang';\n\n@NgModule({\n    exports: [TranslocoModule, TranslocoLocaleModule],\n    providers: [\n        provideTransloco({\n            config: {\n                availableLangs: [\n                    { id: \"en\", label: \"English\" },\n                    { id: \"es\", label: \"Spanish\" },\n                    { id: \"ru\", label: \"Russia\" },\n                    { id: \"ar\", label: \"Arabic\" },\n                ],\n                defaultLang: 'en',\n                fallbackLang: \"es\",\n                // Remove this option if your application doesn't support changing language in runtime.\n                reRenderOnLangChange: true\n            },\n            loader: TranslocoHttpLoader\n        }),\n        provideTranslocoMessageformat(),\n        provideTranslocoLocale({\n            langToLocaleMapping: {\n                en: \"en-US\",\n                es: \"es-ES\",\n                ru: \"ru-RU\",\n                ar: \"ar-AR\"\n            },\n        }),\n        provideTranslocoPersistLang({\n            storage: {\n                useValue: localStorage,\n            },\n        })\n    ],\n})\nexport class TranslocoRootModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CONTACTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/form/data-contacts.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        city: 'Santiago',\n        country: 'Chile',\n        country_code: 'cl',\n        currency_code: 'CLP',\n        flag_url: '/assets/images/flags/cl.svg',\n        phone_code_type: 'default',\n        phone_code: '+56',\n        main_phone: '+56 2 3210 9063',\n        main_phone_href: '+56232109063',\n        taxez: ' + IVA',\n        currency_number: 1\n    },\n    {\n        city: 'Santiago',\n        country: 'Chile (IP)',\n        country_code: 'cl',\n        currency_code: 'CLP',\n        flag_url: '/assets/images/flags/cl.svg',\n        phone_code_type: 'ip',\n        phone_code: '+44',\n        main_phone: '+44 210 9063',\n        main_phone_href: '+442109063',\n        taxez: ' + IVA',\n        currency_number: 1\n    },\n    {\n        city: 'Lima',\n        country: 'Perú',\n        country_code: 'pe',\n        currency_code: 'PEN',\n        flag_url: '/assets/images/flags/pe.svg',\n        phone_code_type: 'default',\n        phone_code: '+51',\n        main_phone: '+51 1 1707 0316',\n        main_phone_href: '+51117070316',\n        taxez: ' + IGV',\n        currency_number: 5\n    },\n    {\n        city: 'Ciudad de México',\n        country: 'México',\n        country_code: 'me',\n        currency_code: 'MXN',\n        flag_url: '/assets/images/flags/mx.svg',\n        phone_code_type: 'default',\n        phone_code: '+52',\n        main_phone: '+52 55 4163 8355',\n        main_phone_href: '+525541638355',\n        taxez: '',\n        currency_number: 7\n    },\n    {\n        city: 'Buenos Aires',\n        country: 'Argentina',\n        country_code: 'ar',\n        currency_code: 'ARS',\n        flag_url: '/assets/images/flags/ar.svg',\n        phone_code_type: 'default',\n        phone_code: '+54',\n        main_phone: '+54 11 5168 6187',\n        main_phone_href: '+541151686187',\n        taxez: '',\n        currency_number: 10\n    },\n    {\n        city: 'Bogotá',\n        country: 'Colombia',\n        country_code: 'co',\n        currency_code: 'COP',\n        flag_url: '/assets/images/flags/co.svg',\n        phone_code_type: 'default',\n        phone_code: '+57',\n        main_phone: '+57 1 328 9068',\n        main_phone_href: '+5713289068',\n        taxez: '',\n        currency_number: 6\n    }\n]"
            },
            {
                "name": "DATA_CHART",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/dashboard/data-chart.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        day: 1,\n        value: 85\n    },\n    {\n        day: 2,\n        value: 10\n    },\n    {\n        day: 3,\n        value: 63\n    },\n    {\n        day: 4,\n        value: 35\n    },\n    {\n        day: 5,\n        value: 44\n    },\n    {\n        day: 6,\n        value: 25\n    },\n    {\n        day: 7,\n        value: 65\n    },\n    {\n        day: 8,\n        value: 54\n    },\n    {\n        day: 9,\n        value: 80\n    },\n    {\n        day: 10,\n        value: 82\n    },\n    {\n        day: 11,\n        value: 20\n    },\n    {\n        day: 12,\n        value: 65\n    },\n    {\n        day: 13,\n        value: 50\n    },\n    {\n        day: 14,\n        value: 80\n    },\n    {\n        day: 15,\n        value: 72\n    },\n    {\n        day: 16,\n        value: 65\n    },\n    {\n        day: 17,\n        value: 20\n    },\n    {\n        day: 18,\n        value: 65\n    },\n    {\n        day: 19,\n        value: 50\n    },\n    {\n        day: 20,\n        value: 40\n    },\n    {\n        day: 21,\n        value: 35\n    },\n    {\n        day: 22,\n        value: 35\n    },\n    {\n        day: 23,\n        value: 20\n    },\n    {\n        day: 24,\n        value: 65\n    },\n    {\n        day: 25,\n        value: 50\n    },\n    {\n        day: 26,\n        value: 50\n    },\n    {\n        day: 27,\n        value: 55\n    },\n    {\n        day: 28,\n        value: 50\n    },\n    {\n        day: 29,\n        value: 70\n    },\n    {\n        day: 30,\n        value: 35\n    }\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/form/data-contacts.ts": [
                {
                    "name": "CONTACTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/form/data-contacts.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        city: 'Santiago',\n        country: 'Chile',\n        country_code: 'cl',\n        currency_code: 'CLP',\n        flag_url: '/assets/images/flags/cl.svg',\n        phone_code_type: 'default',\n        phone_code: '+56',\n        main_phone: '+56 2 3210 9063',\n        main_phone_href: '+56232109063',\n        taxez: ' + IVA',\n        currency_number: 1\n    },\n    {\n        city: 'Santiago',\n        country: 'Chile (IP)',\n        country_code: 'cl',\n        currency_code: 'CLP',\n        flag_url: '/assets/images/flags/cl.svg',\n        phone_code_type: 'ip',\n        phone_code: '+44',\n        main_phone: '+44 210 9063',\n        main_phone_href: '+442109063',\n        taxez: ' + IVA',\n        currency_number: 1\n    },\n    {\n        city: 'Lima',\n        country: 'Perú',\n        country_code: 'pe',\n        currency_code: 'PEN',\n        flag_url: '/assets/images/flags/pe.svg',\n        phone_code_type: 'default',\n        phone_code: '+51',\n        main_phone: '+51 1 1707 0316',\n        main_phone_href: '+51117070316',\n        taxez: ' + IGV',\n        currency_number: 5\n    },\n    {\n        city: 'Ciudad de México',\n        country: 'México',\n        country_code: 'me',\n        currency_code: 'MXN',\n        flag_url: '/assets/images/flags/mx.svg',\n        phone_code_type: 'default',\n        phone_code: '+52',\n        main_phone: '+52 55 4163 8355',\n        main_phone_href: '+525541638355',\n        taxez: '',\n        currency_number: 7\n    },\n    {\n        city: 'Buenos Aires',\n        country: 'Argentina',\n        country_code: 'ar',\n        currency_code: 'ARS',\n        flag_url: '/assets/images/flags/ar.svg',\n        phone_code_type: 'default',\n        phone_code: '+54',\n        main_phone: '+54 11 5168 6187',\n        main_phone_href: '+541151686187',\n        taxez: '',\n        currency_number: 10\n    },\n    {\n        city: 'Bogotá',\n        country: 'Colombia',\n        country_code: 'co',\n        currency_code: 'COP',\n        flag_url: '/assets/images/flags/co.svg',\n        phone_code_type: 'default',\n        phone_code: '+57',\n        main_phone: '+57 1 328 9068',\n        main_phone_href: '+5713289068',\n        taxez: '',\n        currency_number: 6\n    }\n]"
                }
            ],
            "src/app/components/dashboard/data-chart.ts": [
                {
                    "name": "DATA_CHART",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/dashboard/data-chart.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        day: 1,\n        value: 85\n    },\n    {\n        day: 2,\n        value: 10\n    },\n    {\n        day: 3,\n        value: 63\n    },\n    {\n        day: 4,\n        value: 35\n    },\n    {\n        day: 5,\n        value: 44\n    },\n    {\n        day: 6,\n        value: 25\n    },\n    {\n        day: 7,\n        value: 65\n    },\n    {\n        day: 8,\n        value: 54\n    },\n    {\n        day: 9,\n        value: 80\n    },\n    {\n        day: 10,\n        value: 82\n    },\n    {\n        day: 11,\n        value: 20\n    },\n    {\n        day: 12,\n        value: 65\n    },\n    {\n        day: 13,\n        value: 50\n    },\n    {\n        day: 14,\n        value: 80\n    },\n    {\n        day: 15,\n        value: 72\n    },\n    {\n        day: 16,\n        value: 65\n    },\n    {\n        day: 17,\n        value: 20\n    },\n    {\n        day: 18,\n        value: 65\n    },\n    {\n        day: 19,\n        value: 50\n    },\n    {\n        day: 20,\n        value: 40\n    },\n    {\n        day: 21,\n        value: 35\n    },\n    {\n        day: 22,\n        value: 35\n    },\n    {\n        day: 23,\n        value: 20\n    },\n    {\n        day: 24,\n        value: 65\n    },\n    {\n        day: 25,\n        value: 50\n    },\n    {\n        day: 26,\n        value: 50\n    },\n    {\n        day: 27,\n        value: 55\n    },\n    {\n        day: 28,\n        value: 50\n    },\n    {\n        day: 29,\n        value: 70\n    },\n    {\n        day: 30,\n        value: 35\n    }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "TypographyComponent",
                        "pathMatch": "full"
                    },
                    {
                        "path": "typography",
                        "component": "TypographyComponent"
                    },
                    {
                        "path": "colors-scheme",
                        "component": "ColorHelpersComponent"
                    },
                    {
                        "path": "components",
                        "component": "ComponentsComponent"
                    },
                    {
                        "path": "web-header",
                        "component": "WebHeaderComponent"
                    },
                    {
                        "path": "dashboard",
                        "component": "DashboardComponent"
                    },
                    {
                        "path": "icons",
                        "component": "SvgIconsComponent"
                    },
                    {
                        "path": "slider",
                        "component": "SliderComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/color-helpers/color-helpers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorHelpersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/directives/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/common/services/dropdown.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DropdownService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/services/theme.services.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/sidenav/sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/common/sidenav/svg-icons/svg-icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgIconsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/common/slider/slider.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISlider",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/slider/slider.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISliderProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/common/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/web-header/header/dropdown-menu/dropdown-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/web-header/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/common/web-header/header/header.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMatMenuList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/web-header/web-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WebHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAxisYSettings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBarSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChartSettings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataAxisX",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataAxisY",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataBar",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/bar-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataChart",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/svg-bar/svg-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/svg-grid-axis-x/svg-grid-axis-x.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgGridAxisXComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/svg-grid-axis-y/svg-grid-axis-y.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgGridAxisYComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/svg-tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SvgTooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/bar-chart/svg-tooltip/svg-tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/custom-select/custom-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/custom-select/custom-select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICustomSelect",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/data-chart.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_CHART",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/data-contacts.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Contact",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/data-contacts.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTACTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/phone-field-menu-prefix/phone-field-menu-prefix.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhoneFieldMenuPrefixComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/phone-field-menu-suffix/phone-field-menu-suffix.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhoneFieldMenuSuffixComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/phone-field/phone-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhoneFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/info-banner/info-banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoBannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/transloco-loader.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslocoHttpLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}